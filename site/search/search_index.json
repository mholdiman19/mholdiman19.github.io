{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ReadMyDocs Greetings Visitors! WELCOME MESSAGE: I created this site to organize and backup commands, documentation and anything else I want to have accessible. Please note that I attempted to give credit where applicable and this site is constantly updated. Needless to say, sections are not exhaustive and are my notes while reading, watching videos or on-the-job experience and learning. Thank you! For full documentation visit mkdocs.org . Mkdocs Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs build --clean - Removes stale files in the site directory. mkdocs help - Print this help message. Project layout mkdocs.yml => Configuration file. docs/index.md => Documentation homepage.","title":"Home"},{"location":"#welcome-to-readmydocs","text":"Greetings Visitors! WELCOME MESSAGE: I created this site to organize and backup commands, documentation and anything else I want to have accessible. Please note that I attempted to give credit where applicable and this site is constantly updated. Needless to say, sections are not exhaustive and are my notes while reading, watching videos or on-the-job experience and learning. Thank you! For full documentation visit mkdocs.org .","title":"Welcome to ReadMyDocs"},{"location":"#mkdocs-commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs build --clean - Removes stale files in the site directory. mkdocs help - Print this help message.","title":"Mkdocs Commands"},{"location":"#project-layout","text":"mkdocs.yml => Configuration file. docs/index.md => Documentation homepage.","title":"Project layout"},{"location":"about/","text":"Carinis germana Et in dedit at tamen numquam giganteis Lorem markdownum luminis ille , protecta nata haesit superi tibi orbem protinus, coniuge profundum! Coryli clamat bracchia subiit, ab ponere carpit caputque invidiosa sanguinis, non. Suus aequore in nudis; iura parte finemque sceleris facti; suam feroci nodoso. Dum fer trahunt notatas deum gramina dixerat est ipsum: in? Ulla alterius ibidis Urbem telo demum pollice Elinque, novem quo: forma index dissociata cavis fugiensque illis manibus reparata. Ab aut illis repperit, manet? It audire sine velut in aevo thalamos caecis is murum etiam tempora et dabat solvere. Procul gaudete ferox quaerenti gramina cratem, supplex cardine. serialFooter = software; jsf += serviceMpegOutput; if (mask) { newbie.plagiarismDefaultPage += baudSocial(heuristic + windowCommand, card_memory_schema, toslink); vaporware_mouse_nanometer.mouse_meta_ultra = primaryPageWireless; } Dignus submittere Marte pontum nepotem fulvos est Solebat figuram eam ferendo amara cecidit spoliata verbis, magnum est, est. Inmeriti bracchia genuit: ac collecta vota, quisquam scopulus, dixit novo quod admoveam! Quoque est nymphae notavi in sonum fructum Erat parent, locus incubat. Ire dicta dedit primum saxoque, retro? Inpia ferrum quid saepe fraxineam hospes auctor iam; tum patrii tandem illuc repetemus. Capitis et fera uno imitatus colla se lateque et ipsum malo fama cogeris! Aut admoverat antrum corpore auctor. path(threadingCtr, http + internal_byte, managementProcessSwipe); keystroke(ad); if (exabyte <= yottabyteMegabyte) { cad_domain -= 56553; bios_vdu = disk_kvm.snippet(processor / heuristic); linkedin_syntax_compact.lionGoldenImpression -= 36; } if (pum_input.hard_snow_dslam(graphicsMenuClean + daemon, multiplatform)) { surge = voip_correction(pitchBing, shortcut_office); barebonesTiff.cableIntegrated = suffix * wais; } else { lion_thunderbolt_ocr.designAlignmentUgc /= gigoWimaxBarcraft(2 + drag_wildcard_flash, cdmaVfat); lossy += application.card_link_website.bmp_rpm_excel(374363); } Arva pati Sub iaculo Tmolo furit se spectat placare inter nunc caede gemino sanesque excipit Amphrisia minimos. Nobis festumque captum. Latet superum, quique orbe! Foedumque fulvo! His molliter nil caelo posset, cetera pharetra orbes. Deos sinit mortis tamen tuos curva ferox mater labor admotis, et guttura tritis est. Pretium cornua; sunt una; Clymeneia deus resupinus, fas adapertaque ibitis huius nostro ut ferrum socii, ego? Petii quanta nocent , hanc non perdere Olympus decus fontibus se regna in optabile. Fugit servati.","title":"About"},{"location":"about/#carinis-germana","text":"","title":"Carinis germana"},{"location":"about/#et-in-dedit-at-tamen-numquam-giganteis","text":"Lorem markdownum luminis ille , protecta nata haesit superi tibi orbem protinus, coniuge profundum! Coryli clamat bracchia subiit, ab ponere carpit caputque invidiosa sanguinis, non. Suus aequore in nudis; iura parte finemque sceleris facti; suam feroci nodoso. Dum fer trahunt notatas deum gramina dixerat est ipsum: in?","title":"Et in dedit at tamen numquam giganteis"},{"location":"about/#ulla-alterius-ibidis","text":"Urbem telo demum pollice Elinque, novem quo: forma index dissociata cavis fugiensque illis manibus reparata. Ab aut illis repperit, manet? It audire sine velut in aevo thalamos caecis is murum etiam tempora et dabat solvere. Procul gaudete ferox quaerenti gramina cratem, supplex cardine. serialFooter = software; jsf += serviceMpegOutput; if (mask) { newbie.plagiarismDefaultPage += baudSocial(heuristic + windowCommand, card_memory_schema, toslink); vaporware_mouse_nanometer.mouse_meta_ultra = primaryPageWireless; }","title":"Ulla alterius ibidis"},{"location":"about/#dignus-submittere-marte-pontum-nepotem-fulvos-est","text":"Solebat figuram eam ferendo amara cecidit spoliata verbis, magnum est, est. Inmeriti bracchia genuit: ac collecta vota, quisquam scopulus, dixit novo quod admoveam!","title":"Dignus submittere Marte pontum nepotem fulvos est"},{"location":"about/#quoque-est-nymphae-notavi-in-sonum-fructum","text":"Erat parent, locus incubat. Ire dicta dedit primum saxoque, retro? Inpia ferrum quid saepe fraxineam hospes auctor iam; tum patrii tandem illuc repetemus. Capitis et fera uno imitatus colla se lateque et ipsum malo fama cogeris! Aut admoverat antrum corpore auctor. path(threadingCtr, http + internal_byte, managementProcessSwipe); keystroke(ad); if (exabyte <= yottabyteMegabyte) { cad_domain -= 56553; bios_vdu = disk_kvm.snippet(processor / heuristic); linkedin_syntax_compact.lionGoldenImpression -= 36; } if (pum_input.hard_snow_dslam(graphicsMenuClean + daemon, multiplatform)) { surge = voip_correction(pitchBing, shortcut_office); barebonesTiff.cableIntegrated = suffix * wais; } else { lion_thunderbolt_ocr.designAlignmentUgc /= gigoWimaxBarcraft(2 + drag_wildcard_flash, cdmaVfat); lossy += application.card_link_website.bmp_rpm_excel(374363); }","title":"Quoque est nymphae notavi in sonum fructum"},{"location":"about/#arva-pati","text":"Sub iaculo Tmolo furit se spectat placare inter nunc caede gemino sanesque excipit Amphrisia minimos. Nobis festumque captum. Latet superum, quique orbe! Foedumque fulvo! His molliter nil caelo posset, cetera pharetra orbes. Deos sinit mortis tamen tuos curva ferox mater labor admotis, et guttura tritis est. Pretium cornua; sunt una; Clymeneia deus resupinus, fas adapertaque ibitis huius nostro ut ferrum socii, ego? Petii quanta nocent , hanc non perdere Olympus decus fontibus se regna in optabile. Fugit servati.","title":"Arva pati"},{"location":"bash_scripting/","text":"Bash Scripting Resource: you need to learn BASH Scripting RIGHT NOW!! // EP1 Episode 1 which $SHELL => /bin/bash echo \"Hi Mom\" => Hi Mom To automate the above command, open a text editor, such as nano . nano himom.sh Create script #!/bin/bash echo \"Hi Mom\" save script in nano do ls to confirm your file is saved To run the script, you can do: bash himom.sh or you can change the permissions via chmod +x himom.sh and then do ./himom.sh To see the permissions of the file, do ls -al Bash scripts are just commands. Episode 2 Beginning Quick Challenge Create a script Name it bestdayever.sh Be sure to include the following 3 lines: Good Morning Michelle!! You're looking good today Michelle!! You have the best eyes I've ever seen Michelle!! What if you wanted to change the name for your friend Monica? Add a variable , which can change To do this add, do name=\"Monica\" Then, change remove Michelle in the script Replace with $name Script: #!/bin/bash name=\"Monica\" # Greeting echo \"Good Morning $name!!\" sleep 3 # Compliment 1 echo \"You're looking good today $name!!\" sleep 3 # Compliment 2 echo \"You have the best eyes I've ever seen $name!!\" Results: Good Morning Monica!! You're looking good today Monica!! You have the best eyes I've ever seen Monica!! However, we want to be more lazy and not have to go in and change the name each time. So, we need to make some changes. Script: #!/bin/bash echo \"What is your name?\" read name # Greeting echo \"Good Morning $name!!\" sleep 3 # Compliment 1 echo \"You're looking good today $name!!\" sleep 3 # Compliment 2 echo \"You have the best eyes I've ever seen $name!!\" Results: What is your name? Ben Good Morning Ben!! You're looking good today Ben!! You have the best eyes I've ever seen Ben!! Positional Parameters (A.K.A Argument) Example Script: #!/bin/bash # Positional Parameter (aka Argument) name=$1 # Greeting echo \"Good Morning $name!!\" sleep 3 # Compliment 1 echo \"You're looking good today $name!!\" sleep 3 # Compliment 2 echo \"You have the best eyes I've ever seen $name!!\" To run the script, you would need to do, ./bestdayever2.sh Brian Brian is the positional parameter Results: Good Morning Brian!! You're looking good today Brian!! You have the best eyes I've ever seen Brian!! Challenge Change the eyes variable to something for everyone Essentially, we are adding an additional positional parameter or argument Script: #!/bin/bash # Positional Parameter (aka Argument) name=$1 feature=$2 # Greeting echo \"Good Morning $name!!\" sleep 3 # Compliment 1 echo \"You're looking good today $name!!\" sleep 3 # Compliment 2 echo \"You have the best $feature I've ever seen $name!!\" Again to run the script, I had to input the argument So, I did `./bestdayever2.sh Kim hair Results: Good Morning Kim!! You're looking good today Kim!! You have the best hair I've ever seen Kim!! Now, lets try to use the output of a command in our script. Commands to use: whoami , pwd and date Script: #!/bin/bash # Positional Parameter (aka Argument) name=$1 feature=$2 user=$(whoami) location=$(pwd) date=$(date) # Greeting echo \"Good Morning $name!!\" sleep 3 # Compliment 1 echo \"You're looking good today $name!!\" sleep 3 # Compliment 2 echo \"You have the best $feature I've ever seen $name!!\" sleep 2 echo \"You are currently logged in as $user and you are in the directory $location. Also, today is: $date\" To run script, do ./bestdayever2.sh Kim hair Results: Good Morning Kim!! You're looking good today Kim!! You have the best hair I've ever seen Kim!! You are currently logged in as manhands and you are in the directory /home/manhands/scripts. Also, today is: Thu 30 Jun 2022 03:48:51 PM CDT Here Documents Resource Used => Hak5 All heredocs include the following: command << token script token Example1 cat << _EOF_ echo \"Hello World\" _EOF_ Bash Scripting on Linux (The Complete Guide) Class 02 - Hello World Resource => Bash Scripting on Linux (The Complete Guide) Class 02 - Hello World To see what bash you are using => echo $SHELL Result => /bin/bash Class 03 - Variables How to create a variable in Bash Need to name the variable => Ex: name is the variable. Add an = sign Inside \"\" define the variable. Example is below. #!/bin/bash name=\"Michelle\" echo $name Result is Michelle #!/bin/bash myname=\"Michelle\" myage=\"42\" echo \"Hello, my name is $myname.\" echo \"I am $myage years old.\" Result: Hello, my name is Michelle. I am 43 years old. Clearly, you wouldn't create a script to do these funcions. What are some of the reasons you would create a script? Less typing Less duplication of typing Saves time Another example would be the following: #!/bin/bash word=\"awesome\" echo \"Linux is $word!\" echo \"Videogames are $word!\" echo \"Sunny days are $word!\" Results: Linux is awesome! Videogames are awesome! Sunny days are awesome! You can also utilize the output of commands as well. Example: #!/bin/bash files=$(ls) echo $files Result: 3_variables.sh Advanced_Bash_Scripting.pdf helloworld.sh myscript.sh script_ls.sh How to view environment variables in your Linux session Example => echo $USER Result => manhands More detailed example: #!/bin/bash name=\"Michelle Holdiman\" now=$(date) echo \"Hello $name\" echo \"The system date and time is:\" echo $now echo \"Your username is: $USER\" Results: Hello Michelle Holdiman The system date and time is: Mon Feb 13 09:27:19 AM CST 2023 Your username is: manhands You should use lowercase letters for your variables. Best practice is to use uppercase letters for environment variables. This way whoever is reading your code will know which variables you are creating versus which variables are environment or system variables. How to see your environment variables => env Partial results of my env : LOGNAME=manhands XDG_SESSION_DESKTOP=ubuntu XDG_SESSION_TYPE=wayland SYSTEMD_EXEC_PID=2286 Additional examples echo $HOME echo $USER Class 04 - Basic Math Math is handled differently in Bash than in Python for example. In Bash, the evaluate expression ( expr ) is used. Examples are below: expr 1 + 1 => 2 The spaces are require, or Example => expr 1+1 => 1+1 expr 1 - 1 => 0 expr 1 / 1 => 1 Multiplication is different, since \" * \" is a wildcard in Bash. Example => expr 1 \\* 1 => 1 Mathematical expressions can also be done using variables. Please see example below. #!/bin/bash mynum=19 kimnum=14 expr $mynum + $kimnum Result: 33 Class 05 - If Statements #!/bin/bash # Declaring variable mynum=200 # Beginning of if statement # If statement is determining whether 200 is equal to 200 if [ $mynum -eq 200 ] # Then what are we going to do? Echoing the text statement then echo \"This condition is true.\" # If backwards ends the script fi If I change the variable from 200 to 300, then the statement is no longer true so the text will not be echoed. To combine to \"if statements\" you can use else . Example is below. #!/bin/bash mynum=300 if [ $mynum -eq 200 ] then echo \"The condition is true.\" else echo \"The variable does not equal 200.\" fi Result => The variable does not equal 200. A quick way to do the opposite of the \"if statement\" is to add an \" ! \" mark before the variable in the \"if statement\". Example is below. #!/bin/bash mynum=300 if [ ! $mynum -eq 200 ] then echo \"The condition is true.\" else echo \"The variable does not equal 200.\" fi Result => The condition is true. To set the above if_statement to not equals is to use -ne instead of -eq . -ne => not equal -eq => equal Please see example below using -ne . #!/bin/bash mynum=300 if [ $mynum -ne 200 ] then echo \"The condition is true.\" else echo \"The variable does not equal 200.\" fi Result => The condition is true. Another option is to use greater than, which is -gt . Example is below. #!/bin/bash mynum=300 if [ $mynum -ne 200 ] then echo \"The condition is true.\" else echo \"The variable does not equal 200.\" fi Result => The condition is true. An example of a more useful way to use this would be to see if a file exists. Please see the example below. #!/bin/bash if [ -f ~/myfile ] then echo \"The file exists.\" else echo \"The file does not exist.\" fi Result => The files does not exist. Why? Because I do not have a file named myfile in my home directory. You can also create a script to see if a program is installed, and if not, install it. Example is below. #!/bin/bash command=/usr/bin/htop if [ -f $command ] then echo \"$command is available, let's run it...\" else echo \"$command is not available, installing it...\" sudo apt update && sudo apt install -y htop fi $command Result => The above script installed htop on my system. You can also create the same script without using brackets. Example is below. #!/bin/bash command=htop if command -v $command then echo \"$command is available, let's run it...\" else echo \"$command is not available, installing it...\" sudo apt update && sudo apt install -y htop fi $command Result => htop started running. Brackets are really only needed for test command. command -v can actually be used in command prompt. command lets you know if a command is available. You can find out more about the test command via the man page. If you type man test in your command prompt screen, you will see [] is a test. Class 06 - Exit Codes How do you know if your script was successful? Answer => Exit Codes How does Bash represent whether command/script was successful or if there was a failure? The variable $? represents whether or not the previous command was successful. If I typed ls -l /etc in a command prompt screen and then typed echo $? , then my result would be 0 . What does that mean? 0 => means command was successful Anything other than zero, means that command failed. An exit code tells us the status. An example of a working script: !/bin/bash package=htop sudo apt install $package echo \"The exit code for the package install is: $?\" Result => The exit code for the package install is: 0 An example of a failed script: #!/bin/bash package=notexist sudo apt install $package echo \"The exit code for the package install is: $?\" Result => The exit code for the package install is: 100 An example of a more useful way to utilize the $? exit code. #!/bin/bash package=htop sudo apt install $package if [ $? -eq 0 ] then echo \"The installation of the $package was successful.\" echo \"The new command is available here:\" which $package else echo \"$package failed to install.\" fi A more realistic version of a script you may see on a real Linux system. #!/bin/bash package=notexist sudo apt install $package >> package_install_results.log if [ $? -eq 0 ] then echo \"The installation of the $package was successful.\" echo \"The new command is available here:\" which $package else echo \"$package failed to install.\" >> package_install_fail.log fi Since nonexist is not a real package name. I can find the results in the file package_install_fail.log . Results => notexist failed to install. You need to make sure that the exit codes are in the correct location. Check them at the appropriate time in the script. You can also control what the exit code ends up being. #!/bin/bash echo \"Hello World\" exit 199 echo $? Result => Hello World If you do $? , then you get 199 . Remember when you type exit , the script will exit . Class 07 - While Loops A while loop completes a script over and over again. Please see example below. #!/bin/bash # Setting myvar equal to 1 myvar=1 # Checking to see if myvar is less than 10 while [ $myvar -le 10 ] do echo $myvar myvar=$(( $myvar +1 )) sleep 0.5 done Result: 1 2 3 4 5 6 7 8 9 10 Why does the script stop at 10? Because 11 is greater than 10, meaning the script is no longer true, so it stops. Another example would be the following: #!/bin/bash myvar=1 while [ -f ~/testfile ] do echo \"The test file exists.\" done echo \"The file no longer exists.\" The system will check to see if testfile exists in the ~ directory. Result (if the file exists): The test file exists. The test file exists. The test file exists. The test file exists. The test file exists. The test file exists. The above will continue to run until it is manually stopped or the file is removed. Result if the file does not exist: The file no longer exists. Another example including sleep would be the following: #!/bin/bash # myvar is not needed myvar=1 # Does the testfile exist? while [ -f ~/testfile ] do echo \"As of $(date), the test file exists.\" sleep 5 done # This happens if the file does not exist. echo \"As of $(date), the test file has gone missing.\" The above not only adds the sleep function, but it also adds the date to the script as well. In the output below, you can see the script did sleep for 5 seconds prior to the loop checking again. As of Fri Feb 17 03:14:22 PM CST 2023, the test file exists. As of Fri Feb 17 03:14:27 PM CST 2023, the test file exists. As of Fri Feb 17 03:14:32 PM CST 2023, the test file exists. As of Fri Feb 17 03:14:37 PM CST 2023, the test file exists. Class 08 - Universal Update Script We are going to write a useful bash script. #!/bin/bash if [ -d /etc/pacman.d ] then # The host is based on Arch, run the pacman update command sudo pacman -Syu fi if [ -d /etc/apt ] then # The is host is based on Debian or Ubuntu, # Run the apt version of the command sudo apt update sudo apt dist-upgrade echo \"Update finished and upgrade finished.\" fi There are several \"issues\" with this script. We will resolve them in later sessions. Another possibility is the following: ##!/bin/bash release_file=/etc/os-release # Checking to see if this directory exists if grep -q \"Arch\" $release_file then # The host is based on Arch, run the pacman update command sudo pacman -Syu fi # Checking to see if this directory exists if grep -q \"Ubuntu\" $release_file then # The is host is based on Debian or Ubuntu, # Run the apt version of the command sudo apt update sudo apt dist-upgrade fi grep searches text files and -q means quiet mode. Comments begin with the # symbol and they are ignored by bash . Searching for text in a file is a better way to do this, but it is not the best way. There has to be a better way to do this without so many if-statements. You can use the || , which means \"OR\". #!/bin/bash release_file=/etc/os-release # Checking to see if this directory exists if grep -q \"Arch\" $release_file then # The host is based on Arch, run the pacman update command sudo pacman -Syu fi # Checking to see if this directory exists if grep -q \"Debian\" $release_file || grep -q \"Ubuntu\" $release_file then # The is host is based on Debian or Ubuntu, # Run the apt version of the command sudo apt update sudo apt dist-upgrade fi You can also use && , which means \"AND\". We wouldn't want to use && in this script because we wouldn't be running Ubuntu and Debian at the same time. Class 09 - For Loops A for loop is a concept of executing a command or set of commands against each item in a set. Example: #!/bin/bash for current_number in 1 2 3 4 5 6 7 8 9 10 do echo $current_number sleep 1 done echo \"This is outside of the for loop.\" Results: 1 2 3 4 5 6 7 8 9 10 This is outside of the for loop. You can shorten to the following: #!/bin/bash for current_number in {1..10} do echo $current_number sleep 1 done echo \"This is outside of the for loop.\" The results are the exact same. The script is just shorter.","title":"Bash Scripting"},{"location":"bash_scripting/#bash-scripting","text":"Resource: you need to learn BASH Scripting RIGHT NOW!! // EP1","title":"Bash Scripting"},{"location":"bash_scripting/#episode-1","text":"which $SHELL => /bin/bash echo \"Hi Mom\" => Hi Mom To automate the above command, open a text editor, such as nano . nano himom.sh Create script #!/bin/bash echo \"Hi Mom\" save script in nano do ls to confirm your file is saved To run the script, you can do: bash himom.sh or you can change the permissions via chmod +x himom.sh and then do ./himom.sh To see the permissions of the file, do ls -al Bash scripts are just commands.","title":"Episode 1"},{"location":"bash_scripting/#episode-2","text":"Beginning Quick Challenge Create a script Name it bestdayever.sh Be sure to include the following 3 lines: Good Morning Michelle!! You're looking good today Michelle!! You have the best eyes I've ever seen Michelle!! What if you wanted to change the name for your friend Monica? Add a variable , which can change To do this add, do name=\"Monica\" Then, change remove Michelle in the script Replace with $name Script: #!/bin/bash name=\"Monica\" # Greeting echo \"Good Morning $name!!\" sleep 3 # Compliment 1 echo \"You're looking good today $name!!\" sleep 3 # Compliment 2 echo \"You have the best eyes I've ever seen $name!!\" Results: Good Morning Monica!! You're looking good today Monica!! You have the best eyes I've ever seen Monica!! However, we want to be more lazy and not have to go in and change the name each time. So, we need to make some changes. Script: #!/bin/bash echo \"What is your name?\" read name # Greeting echo \"Good Morning $name!!\" sleep 3 # Compliment 1 echo \"You're looking good today $name!!\" sleep 3 # Compliment 2 echo \"You have the best eyes I've ever seen $name!!\" Results: What is your name? Ben Good Morning Ben!! You're looking good today Ben!! You have the best eyes I've ever seen Ben!!","title":"Episode 2"},{"location":"bash_scripting/#positional-parameters-aka-argument-example","text":"Script: #!/bin/bash # Positional Parameter (aka Argument) name=$1 # Greeting echo \"Good Morning $name!!\" sleep 3 # Compliment 1 echo \"You're looking good today $name!!\" sleep 3 # Compliment 2 echo \"You have the best eyes I've ever seen $name!!\" To run the script, you would need to do, ./bestdayever2.sh Brian Brian is the positional parameter Results: Good Morning Brian!! You're looking good today Brian!! You have the best eyes I've ever seen Brian!! Challenge Change the eyes variable to something for everyone Essentially, we are adding an additional positional parameter or argument Script: #!/bin/bash # Positional Parameter (aka Argument) name=$1 feature=$2 # Greeting echo \"Good Morning $name!!\" sleep 3 # Compliment 1 echo \"You're looking good today $name!!\" sleep 3 # Compliment 2 echo \"You have the best $feature I've ever seen $name!!\" Again to run the script, I had to input the argument So, I did `./bestdayever2.sh Kim hair Results: Good Morning Kim!! You're looking good today Kim!! You have the best hair I've ever seen Kim!! Now, lets try to use the output of a command in our script. Commands to use: whoami , pwd and date Script: #!/bin/bash # Positional Parameter (aka Argument) name=$1 feature=$2 user=$(whoami) location=$(pwd) date=$(date) # Greeting echo \"Good Morning $name!!\" sleep 3 # Compliment 1 echo \"You're looking good today $name!!\" sleep 3 # Compliment 2 echo \"You have the best $feature I've ever seen $name!!\" sleep 2 echo \"You are currently logged in as $user and you are in the directory $location. Also, today is: $date\" To run script, do ./bestdayever2.sh Kim hair Results: Good Morning Kim!! You're looking good today Kim!! You have the best hair I've ever seen Kim!! You are currently logged in as manhands and you are in the directory /home/manhands/scripts. Also, today is: Thu 30 Jun 2022 03:48:51 PM CDT","title":"Positional Parameters (A.K.A Argument) Example"},{"location":"bash_scripting/#here-documents","text":"Resource Used => Hak5 All heredocs include the following: command << token script token Example1 cat << _EOF_ echo \"Hello World\" _EOF_","title":"Here Documents"},{"location":"bash_scripting/#bash-scripting-on-linux-the-complete-guide","text":"","title":"Bash Scripting on Linux (The Complete Guide)"},{"location":"bash_scripting/#class-02-hello-world","text":"Resource => Bash Scripting on Linux (The Complete Guide) Class 02 - Hello World To see what bash you are using => echo $SHELL Result => /bin/bash","title":"Class 02 - Hello World"},{"location":"bash_scripting/#class-03-variables","text":"","title":"Class 03 - Variables"},{"location":"bash_scripting/#how-to-create-a-variable-in-bash","text":"Need to name the variable => Ex: name is the variable. Add an = sign Inside \"\" define the variable. Example is below. #!/bin/bash name=\"Michelle\" echo $name Result is Michelle #!/bin/bash myname=\"Michelle\" myage=\"42\" echo \"Hello, my name is $myname.\" echo \"I am $myage years old.\" Result: Hello, my name is Michelle. I am 43 years old. Clearly, you wouldn't create a script to do these funcions. What are some of the reasons you would create a script? Less typing Less duplication of typing Saves time Another example would be the following: #!/bin/bash word=\"awesome\" echo \"Linux is $word!\" echo \"Videogames are $word!\" echo \"Sunny days are $word!\" Results: Linux is awesome! Videogames are awesome! Sunny days are awesome! You can also utilize the output of commands as well. Example: #!/bin/bash files=$(ls) echo $files Result: 3_variables.sh Advanced_Bash_Scripting.pdf helloworld.sh myscript.sh script_ls.sh How to view environment variables in your Linux session Example => echo $USER Result => manhands More detailed example: #!/bin/bash name=\"Michelle Holdiman\" now=$(date) echo \"Hello $name\" echo \"The system date and time is:\" echo $now echo \"Your username is: $USER\" Results: Hello Michelle Holdiman The system date and time is: Mon Feb 13 09:27:19 AM CST 2023 Your username is: manhands You should use lowercase letters for your variables. Best practice is to use uppercase letters for environment variables. This way whoever is reading your code will know which variables you are creating versus which variables are environment or system variables. How to see your environment variables => env Partial results of my env : LOGNAME=manhands XDG_SESSION_DESKTOP=ubuntu XDG_SESSION_TYPE=wayland SYSTEMD_EXEC_PID=2286 Additional examples echo $HOME echo $USER","title":"How to create a variable in Bash"},{"location":"bash_scripting/#class-04-basic-math","text":"Math is handled differently in Bash than in Python for example. In Bash, the evaluate expression ( expr ) is used. Examples are below: expr 1 + 1 => 2 The spaces are require, or Example => expr 1+1 => 1+1 expr 1 - 1 => 0 expr 1 / 1 => 1 Multiplication is different, since \" * \" is a wildcard in Bash. Example => expr 1 \\* 1 => 1 Mathematical expressions can also be done using variables. Please see example below. #!/bin/bash mynum=19 kimnum=14 expr $mynum + $kimnum Result: 33","title":"Class 04 - Basic Math"},{"location":"bash_scripting/#class-05-if-statements","text":"#!/bin/bash # Declaring variable mynum=200 # Beginning of if statement # If statement is determining whether 200 is equal to 200 if [ $mynum -eq 200 ] # Then what are we going to do? Echoing the text statement then echo \"This condition is true.\" # If backwards ends the script fi If I change the variable from 200 to 300, then the statement is no longer true so the text will not be echoed. To combine to \"if statements\" you can use else . Example is below. #!/bin/bash mynum=300 if [ $mynum -eq 200 ] then echo \"The condition is true.\" else echo \"The variable does not equal 200.\" fi Result => The variable does not equal 200. A quick way to do the opposite of the \"if statement\" is to add an \" ! \" mark before the variable in the \"if statement\". Example is below. #!/bin/bash mynum=300 if [ ! $mynum -eq 200 ] then echo \"The condition is true.\" else echo \"The variable does not equal 200.\" fi Result => The condition is true. To set the above if_statement to not equals is to use -ne instead of -eq . -ne => not equal -eq => equal Please see example below using -ne . #!/bin/bash mynum=300 if [ $mynum -ne 200 ] then echo \"The condition is true.\" else echo \"The variable does not equal 200.\" fi Result => The condition is true. Another option is to use greater than, which is -gt . Example is below. #!/bin/bash mynum=300 if [ $mynum -ne 200 ] then echo \"The condition is true.\" else echo \"The variable does not equal 200.\" fi Result => The condition is true. An example of a more useful way to use this would be to see if a file exists. Please see the example below. #!/bin/bash if [ -f ~/myfile ] then echo \"The file exists.\" else echo \"The file does not exist.\" fi Result => The files does not exist. Why? Because I do not have a file named myfile in my home directory. You can also create a script to see if a program is installed, and if not, install it. Example is below. #!/bin/bash command=/usr/bin/htop if [ -f $command ] then echo \"$command is available, let's run it...\" else echo \"$command is not available, installing it...\" sudo apt update && sudo apt install -y htop fi $command Result => The above script installed htop on my system. You can also create the same script without using brackets. Example is below. #!/bin/bash command=htop if command -v $command then echo \"$command is available, let's run it...\" else echo \"$command is not available, installing it...\" sudo apt update && sudo apt install -y htop fi $command Result => htop started running. Brackets are really only needed for test command. command -v can actually be used in command prompt. command lets you know if a command is available. You can find out more about the test command via the man page. If you type man test in your command prompt screen, you will see [] is a test.","title":"Class 05 - If Statements"},{"location":"bash_scripting/#class-06-exit-codes","text":"How do you know if your script was successful? Answer => Exit Codes How does Bash represent whether command/script was successful or if there was a failure? The variable $? represents whether or not the previous command was successful. If I typed ls -l /etc in a command prompt screen and then typed echo $? , then my result would be 0 . What does that mean? 0 => means command was successful Anything other than zero, means that command failed. An exit code tells us the status. An example of a working script: !/bin/bash package=htop sudo apt install $package echo \"The exit code for the package install is: $?\" Result => The exit code for the package install is: 0 An example of a failed script: #!/bin/bash package=notexist sudo apt install $package echo \"The exit code for the package install is: $?\" Result => The exit code for the package install is: 100 An example of a more useful way to utilize the $? exit code. #!/bin/bash package=htop sudo apt install $package if [ $? -eq 0 ] then echo \"The installation of the $package was successful.\" echo \"The new command is available here:\" which $package else echo \"$package failed to install.\" fi A more realistic version of a script you may see on a real Linux system. #!/bin/bash package=notexist sudo apt install $package >> package_install_results.log if [ $? -eq 0 ] then echo \"The installation of the $package was successful.\" echo \"The new command is available here:\" which $package else echo \"$package failed to install.\" >> package_install_fail.log fi Since nonexist is not a real package name. I can find the results in the file package_install_fail.log . Results => notexist failed to install. You need to make sure that the exit codes are in the correct location. Check them at the appropriate time in the script. You can also control what the exit code ends up being. #!/bin/bash echo \"Hello World\" exit 199 echo $? Result => Hello World If you do $? , then you get 199 . Remember when you type exit , the script will exit .","title":"Class 06 - Exit Codes"},{"location":"bash_scripting/#class-07-while-loops","text":"A while loop completes a script over and over again. Please see example below. #!/bin/bash # Setting myvar equal to 1 myvar=1 # Checking to see if myvar is less than 10 while [ $myvar -le 10 ] do echo $myvar myvar=$(( $myvar +1 )) sleep 0.5 done Result: 1 2 3 4 5 6 7 8 9 10 Why does the script stop at 10? Because 11 is greater than 10, meaning the script is no longer true, so it stops. Another example would be the following: #!/bin/bash myvar=1 while [ -f ~/testfile ] do echo \"The test file exists.\" done echo \"The file no longer exists.\" The system will check to see if testfile exists in the ~ directory. Result (if the file exists): The test file exists. The test file exists. The test file exists. The test file exists. The test file exists. The test file exists. The above will continue to run until it is manually stopped or the file is removed. Result if the file does not exist: The file no longer exists. Another example including sleep would be the following: #!/bin/bash # myvar is not needed myvar=1 # Does the testfile exist? while [ -f ~/testfile ] do echo \"As of $(date), the test file exists.\" sleep 5 done # This happens if the file does not exist. echo \"As of $(date), the test file has gone missing.\" The above not only adds the sleep function, but it also adds the date to the script as well. In the output below, you can see the script did sleep for 5 seconds prior to the loop checking again. As of Fri Feb 17 03:14:22 PM CST 2023, the test file exists. As of Fri Feb 17 03:14:27 PM CST 2023, the test file exists. As of Fri Feb 17 03:14:32 PM CST 2023, the test file exists. As of Fri Feb 17 03:14:37 PM CST 2023, the test file exists.","title":"Class 07 - While Loops"},{"location":"bash_scripting/#class-08-universal-update-script","text":"We are going to write a useful bash script. #!/bin/bash if [ -d /etc/pacman.d ] then # The host is based on Arch, run the pacman update command sudo pacman -Syu fi if [ -d /etc/apt ] then # The is host is based on Debian or Ubuntu, # Run the apt version of the command sudo apt update sudo apt dist-upgrade echo \"Update finished and upgrade finished.\" fi There are several \"issues\" with this script. We will resolve them in later sessions. Another possibility is the following: ##!/bin/bash release_file=/etc/os-release # Checking to see if this directory exists if grep -q \"Arch\" $release_file then # The host is based on Arch, run the pacman update command sudo pacman -Syu fi # Checking to see if this directory exists if grep -q \"Ubuntu\" $release_file then # The is host is based on Debian or Ubuntu, # Run the apt version of the command sudo apt update sudo apt dist-upgrade fi grep searches text files and -q means quiet mode. Comments begin with the # symbol and they are ignored by bash . Searching for text in a file is a better way to do this, but it is not the best way. There has to be a better way to do this without so many if-statements. You can use the || , which means \"OR\". #!/bin/bash release_file=/etc/os-release # Checking to see if this directory exists if grep -q \"Arch\" $release_file then # The host is based on Arch, run the pacman update command sudo pacman -Syu fi # Checking to see if this directory exists if grep -q \"Debian\" $release_file || grep -q \"Ubuntu\" $release_file then # The is host is based on Debian or Ubuntu, # Run the apt version of the command sudo apt update sudo apt dist-upgrade fi You can also use && , which means \"AND\". We wouldn't want to use && in this script because we wouldn't be running Ubuntu and Debian at the same time.","title":"Class 08 - Universal Update Script"},{"location":"bash_scripting/#class-09-for-loops","text":"A for loop is a concept of executing a command or set of commands against each item in a set. Example: #!/bin/bash for current_number in 1 2 3 4 5 6 7 8 9 10 do echo $current_number sleep 1 done echo \"This is outside of the for loop.\" Results: 1 2 3 4 5 6 7 8 9 10 This is outside of the for loop. You can shorten to the following: #!/bin/bash for current_number in {1..10} do echo $current_number sleep 1 done echo \"This is outside of the for loop.\" The results are the exact same. The script is just shorter.","title":"Class 09 - For Loops"},{"location":"commands/","text":"Linux CLI Commands Adding a User in Linux To add the user => adduser <username> To verify the new user was created => ls /home or cat /etc/passwd To add user to the sudoers group => usermod -aG sudo <username> then => groups <username> Changing Password via CLI To change your password => passwd To change someone else's password => sudo passwd <user's name> APT ( apt ) How to Prevent & Fix Package Dependency Errors in Ubuntu Update Package => sudo apt update Upgrade Packages => sudo apt dist-upgrade Clear Apt Package Cache => sudo apt clean Do a Mock Installation => sudo apt install --dry-run \"package name\" Remove Mock Installation => sudo apt remove --dry-run \"package name\" Fix Broken Installations => sudo apt -f install Configure Packages that Failed to Install => sudo dpkg --configure -a Use PPA-Purge (to install) => sudo apt install ppa-purge To Purge a PPA => sudo ppa-purge \"ppa:address\" Example => sudo ppa-purge ppa:geany-dev/ppa Use Aptitude Package Manager => sudo apt install aptitude NOT the same as apt To Reinstall Ubuntu Desktop Package => sudo apt install --reinstall ubuntu-desktop Pulls in essential packages that were installed by default To Remove or Disable PPAs Before Upgrading to a Newer Version of Ubuntu => sudo add-apt-repository --remove \"ppa:name\" Use Synaptic Package Manager to Disable a PPA (not removing) To Search for a Software Package => apt search <PACKAGE-NAME> COPY ( cp ) cp => commande-line utility for copying files and directories on Unix and Linux systems Command Syntax => cp [options] SOURCE... DESTINATION To Copy a File => cp file file_backup To Copy a File to Directory => cp file.txt /backup To Force Copy to Prompt for Confirmation => cp -i file.txt file_backup.txt To Copy a Directory (including all files and subdirectories) => cp -R Pictures Pictures_Backup DHCP Client Use this command to force Ubuntu Server 20.04 LTS to request a DHCP Client dhclient -r -v eth0 && rm /var/lib/dhcp/dhclient.* ; dhclient -v eth0 DPKG ( dpkg ) To Install a DEB Package => sudo dpkg -i example.deb If you get => dpkg: error processing package Do => sudo apt install -f Expansion Shortcuts Resource Used => Advanced Bash Scripting Tuturial Tilde Expansion Brace Expansion written with braces around an expression can help with repeated commands with different terms or interpolation within a range Example1 : touch {apple,banana,cherry,durian} $ touch {apple,banana,cherry,durian} $ ls apple banana cherry durian Example2 : touch file_{1..10} $ touch file_{1..10} $ ls file_1 file_10 file_2 file_3 file_4 file_5 file_6 file_7 file_8 file_9 If you go above 10, say to 1000, the files may not sort the way you want, so you should use zero padding . [Example => touch file_{01..1000} ] The above can also be completed with letters. $ echo {A..z} A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z GDEBI ( gdebi ) gdeb => command to install DEB packages that will automatically download and install any required dependencies. May need to be installed => sudo apt install gdebi-core Once installed command syntax is => sudo gdebi example.deb IP ( ip ) To Up/Down an Interface ip link set dev eth0 down ip link set dev eth0 up Please reference ip Command Cheat Sheet for RHEL addr => displays IP addresses and property information EX => ip addr show dev enp0s25 link => manage and display the state of all the network interfaces EX => ip link show dev enp0s25 EX => ip -s link [shows statistics] route => displays and alters the routing table EX => ip route maddr => manages and displays multicast IP addresses EX => ip maddr neigh => shows neighbor objects; also known as the ARP table for IPv4 EX => ip neigh help => displays a list of commands and arguments for each subcommand EX => ip link help EX => ip help EX => ip addr help Adjusting and Viewing Routes route add => adds an entry to the routing table EX => ip route add default via 192.168.1.1 dev enp0s25 EX => ip route add 192.168.1.0/24 via 192.168.1.1 EX => ip route add 192.168.1.0/24 dev enp0s25 route delete => deletes a routing table entry EX => ip route delete 192.168.1.0/24 via 192.168.1.1 route replace => replaces, or adds if not defined, a route EX => ip route replace 192.168.1.0/24 dev enp0s25 route get => displays the route an address will take EX => ip route get 192.168.1.5 Useful Networking Commands (Not Necessarily Provided from ip route) arping => sends an ARP request to a neighbor host EX => arping -I enp0s25 192.168.19.8 EX => arping -D -I enp0s25 192.168.19.1 [Checks for duplicate MAC addresses] ethtool => queries or controls network drive and hardware settings EX => ethtool -g eth0 EX => ethtool -i eth0 EX => ethtool -S eth0 IPTABLES ( iptables ) a firewall tool used to manage packet filtering & NAT rules frontend tool used to manage the Linux kernel's netfilter framework Please reference: A Tutorial for Controlling Network Traffic with IPtables Understanding IPtables Can use iptables to filter both incoming and outgoing packets as well as route network packets. Tables (def) a collection of chains that serve a particular function. 3 Main Tables Filter => used to control the flow of packets in and out of the system. NAT => used to redirect connections to other interface on the network. Mangle => used to modify packet headers. Each table has a chain of rules. FILTER TABLE NAT TABLE MANGLE TABLE INPUT CHAIN OUTPUT CHAIN INPUT CHAIN OUTPUT CHAIN PREROUTING CHAIN OUTPUT CHAIN FORWARD CHAIN POSTROUTING CHAIN FORWARD CHAIN PREROUTING CHAIN POSTROUTING CHAIN NOTE: The Filter Table is responsible for blocking or allowing connections and is the default filter in iptables. Chains (def) a list of rules that are processed in order. 5 main chains in iptables: Input => used to manage incoming packets/connections to service or protocol. Output => outgoing packet after it has been created/processed. Forward => forwards incoming packets from their source to destination ( routing ). Prerouting => after the packet enters the network interface. Postrouting => before the packet leaves the network interface after the routing decision has been made. Understanding Packet Flow Incoming packets are analyzed at each chain and are tested against a set of rules. If a rules is matched, the target is set. Targets are the following: ACCEPT => Stop processing and let the packet flow. REJECT => Drops the packet with feedback. DROP => Stops the processing at the current chain and drops the packet. LOG => Similar to ACCEPT, but it is logged to /var/log/messages As an example, say you want to block all incoming connections to your web server on port 80. Example packet flow: Add a rule to the incoming chain in the filter table. Set the target to REJECT . If the target gets to the end of the chain without matching any rules, the default rule is used. If there is no default rule, the packet is accepted. Installing IPtables iptables is an included utility by default. Recommendation is to disable or delete any rules you have before beginning or creating a new configuration. You must uninstall any other firewall management utilities like UFW. To install => sudo apt install iptables Default config file for iptables => /etc/sysconfig/iptables . Can be modified using text editor of your choice. EX => vim /etc/sysconfig/iptables Using IPtables Building IPtables Commands Some common command options. See iptables man page. EX => sudo iptables -t filter -I INPUT -m tcp -p tcp --dport 80 -j REJECT The above command blocks any incoming traffic to the web server. Listing Chains To see all the available chains in the filter table by using the list command. EX => sudo iptables -L EX => sudo iptables -L -nv This will display the INPUT , OUTPUT and FORWARD chains. Specifying Default Policy If you have a fresh configuration or no predefined rules, you should set the default target policy. In the example below, the default policy is set to ACCEPT , which means all traffic is accepted by default. To set default policy: sudo iptables --policy INPUT ACCEPT sudo iptables --policy FORWARD ACCEPT sudo iptables --policy OUTPUT ACCEPT To disable access, just use DROP or REJECT instead of ACCEPT . Blocking & Allowing Connections From IP Addresses 192.168.1.1 is the example IP; replace with your IP. To block all incoming requests from an IP address: sudo iptables -A INPUT -s 192.168.1.1 -j DROP To block all incoming connections from an entire subnet sudo iptables -A INPUT -s 192.168.1.1/24 -j DROP To block all outgoing connections to a particular IP or subnet add the following OUTPUT chain sudo iptables -I OUTPUT -s 192.168.1.1 -j DROP Blocking & Allowing Connections To Ports To block connections to ports and services, specify the protocol and the destination port. To block any incoming SSH connections to the server: sudo iptables -I INPUT -p tcp --dport 22 -j DROP To block any incoming connections to your web server: running on port 80 sudo iptables -I INPUT -p tcp --dport 80 -j DROP To block an IP from connecting to a specific service: sudo iptables -I INPUT -p tcp --dport 80 -s 10.10.10.1 -j DROP Deeper dive into the iptables command to block all traffic: iptables -A INPUT -j DROP -p tcp --destination-port 110 -i eth0 -A => will add or append the rule to the end of the chain. INPUT => will add the rule to the table. DROP => packets will be discarded. -p tcp => means the rule will only drop TCP packets. --destination-port 110 => filters packets targeted to port 110. -i eth0 => means this rule will only impact packets arriving on the eth0 interface. NOTE: iptables does NOT recognize aliases on the network interface. If you have virtual interfaces, then you will have to specify the destination IP address. iptables -A INPUT -j DROP -p tcp --destination-port 110 -i eth0 -d 192.168.100.0 Saving Changes To save the changes you have made to your rule-set, so they are persistent: sudo /sbin/iptables-save Deleting & Clearing Rules If you want to delete a specific rule, you need to determine the rule line number. To do this, list the chains and the rules with the following options: sudo iptables -L --line-numbers The above lists the relevant line numbers for each rule. After determining the line number, you can delete with the following: sudo iptables -D INPUT 3 To clear all the rules and start over: sudo iptables -F KILL & KILLALL ( kill , killall ) killall => a tool for terminating running processes on your system based on name kill => terminates processes based on Process ID number (PID) both kill and killall can also send specific system signals to processes use killall and kill with tools such as Process Status ps , to manage and end processes that are stuck or unresponsive. killall Usage will terminate all programs that match the specified name. sends SIGTERM or signal number, which terminates running processes that match the name. you can also specify a different signal using -s option as follow: killall -s 9 <process name> the above sends the SIGKILL signal which is more successful at ending unruly processes. can also specify signals in one of the following formats: killall -KILL <process name> killall -SIGKILL <process name> killall -9 <process name> kill Usage kill => command terminates individual processes or specified by their PID kill <PID> without options, KILL sends SIGTERM to the PID specified and asks the application or service to shut itself down. Multiple PIDs and alternate system signals can be specified within a single KILL command The following examples all send the SIGKILL signal to the PID specified: kill -s KILL <PID> kill -KILL <PID> System Signals The KILL command does NOT terminate a process directly. Alternatively, a signal is sent to the process where the process will have instructions to follow if it receives a given signal. For further reference => man 7 signal Standard Signals Signal Value Action Comment SIGHUP 1 Term Hangup detected on controlling terminal or death SIGINT 2 Term Interrupt from keyboard SIGQUIT 3 Core Quit from keyboard SIGILL 4 Core Illegal Instruction SIGABRT 6 Core Abort signal from abort(3) SIGFPE 8 Core Floating-point exception SIGKILL 9 Term Kill signal SIGSERV 11 Core Invalid memory reference SIGPIPE 13 Term Broken pipe: write to pipe with no readers; see pipe (7) SIGALRM 14 Term Timer signal from alarm (2) SIGTERM 15 Term Termination signal SIGUSR1 30,10,16 Term User-defined signal 1 SIGUSR2 31,12,17 Term User-defined signal 2 SIGCHLD 20,17,18 Ign Child stopped/terminated SIGCONT 19,18,25 Cont Continue if stopped SIGSTOP 17,19,23 Stop Stop process SIGTSTP 18,20,24 Stop Stop typed at terminal SIGTTIN 21,21,26 Stop Terminal input for background SIGTTOU 22,22,27 Stop Terminal output for background To list ALL available signals without descriptions kill -l killall -l To convert a signal name to a number, or vice versa: kill -l 9 kill -l kill Finding Running Processes Use ps command to view processes that are currently runing and their PIDs ps aux | grep \"emacs\" => simple search for \"emacs\" Example Results: manhands 20002 0.0 0.0 9080 2560 pts/0 S+ 13:30 0:00 grep --color=auto emacs Can also use ps auxf to view hierarchal tree of processes. Verifying Process Termination Adding the -w option to a killall command causes killall to wait until the process terminates before exiting. killall -w irssi Example issues SIGTERM system signal to a background process with a name that matches irssi killall will wait until the matched process ends If no process matches the name specified, killall returns an error message: killall -w irssi => irssi:no process found LINKS ( ln ) ln creates hard and symbolic links ln <filename> <link_name> Hard Link ln <filename> <linkname> original way of creating links creates an additional link to a file cannot reference a directory Symbolic Link more modern approach to links think of it as a ln -s <filename> <link_name> MOVE ( mv ) Moves files To move a file, do the following: mv source_file... target_dir Removing Crash Report Files Crash report files are located in => /var/crash To remove them, do the following: cd /var/crash/ ls sudo rm /var/crash SECURE COPY ( scp ) Resource => How to Use SCP Command to Securely Transfer Files Description: Secure Copy scp is a command line utility that allows you to securely copy files and directories between two locations. Command Syntax: scp [OPTION] [user@]SRC_HOST:]file1 [user@]DEST_HOST:]file2 OPTION - scp options such as cipher, ssh configuration, ssh port, limit, recursive copy...etc. [user@]SRC_HOST:]file1 = Source File [user@]DEST_HOST:]file2 = Destination File System Log (rsyslog) REFERENCE : How to Create a Centralized Log Server with Rsyslog stored in /var/log can act as a client or a server Ex of syslog log message scheme: type (facility).priority (severity) destination(where to send the log) A facility is represented by the internal system processes that generates the messages. In Linux interal processes (aka \"facilities\") that generate logs are standardized as follows: auth => messages generated by authentication processes (logins). cron => messages generated by scheduled processes (crontab). daemon => messages generated by daemons (internal services). kernel => messges generated by the Linux kernel. mail => messages generated by a mail server. syslog => messages generated by the rsyslog daemon itself. lpr => messages generated by local printers or a print server. local0-local7 => custom messages definted by an administrator (local7 is usually assigned for Cisco or Windows). The priority (severity) levels are standardized as well. Each priority is assigned with a standard abbreviation and a number as described below. emerg => Emergency - 0 alert => Alerts - 1 err => Errors - 3 warn => Warnings - 4 notice => Notification - 5 info => Information - 6 debug => Debugging - 7 3rd part of the syslog schema is represented by the destination directive. Rsyslog daemon can send log messages to be written in a file on a local filesystem (ex. /var/log ), it can be piped to another local process, sent to a local user console (ex. to stdout ), sent via a message to a remote syslog server via TCP/UDP protocol, or even discard the message (ex. /dev/null ) To check if the rsyslog service is installed and/or running => systemctl status rsyslog.service If not running => systemctl start rsyslog.service If not installed => sudo apt-get install rsyslog To configure rsyslog => sudo vim /etc/rsyslog.conf To confirm service is running on configured ports => ss -tunelp | grep 514 TCPDUMP ( tcpdump ) REFERENCE : 12 TCPDUMP Commands - A Network Sniffer Tool Packer sniffer tool Offers the ability to save the tcpdump output to a pcap file. Example => tcpdump -i eth1 -s 65535 -w <filename>.pcap Command Syntax: From a specific interface => tcpdump -i eth0 Capture specified amount of packets => tcpdump -c 5 -i eth0 To display available interfaces => tcpdump -D To capture and save packets in a file => tcpdump -w <filename> -i eth0 Read captured packets file => tcpdump -r <filename> Capture IP address packets => tcpdump -n -i eth0 To capture only TCP packets => tcpdump -i eth0 tcp To capture packets on a specific port => tcpdump -i eth0 port 22 To capture packets from a source IP => tcpdump -i eth0 src <IP address> To capture packets from a destination IP => tcpdump -i eth0 dst <IP address> TREE ( tree ) Lists the content of directories in a tree-like format To run tree in a directory that requires root user permissions => sudo tree To display contents, while including hidden files, use the -a flag => sudo tree -a To see the full path prefix => sudo tree -f To see the subdirectories, minus the files in them => sudo tree -d To specify the maximum display depth of the directory, use the -L flag => sudo tree -L 2 To only display files that match a specific wild-card pattern, user the -P flag => sudo tree -P cata* To eliminate empty directories, you can use the --prune option => sudo tree --prune If you would like to see the file permissions, then do => sudo tree -p If you would like to redirect the output to a text file => sudo tree -o <filename> Customizing Your Terminal Syncthing Install & Configuration Downloaded install file at Syncthing Downloads Did the install via the CLI below location to download the .deb file Resource I used to install and configure this was listed on Journal Date 20200917 Added systemd unit wget https://raw.githubusercontent.com/syncthing/syncthing/main/etc/linux-systemd/system/syncthing%40.service sudo chown root: syncthing@.service sudo mv syncthing@.service /etc/systemd/system sudo systemctl daemon-reload Enable & Start the Unit sudo systemctl enable syncthing@<user> sudo systemctl start syncthing@<user> Access the Web GUI for Synchting http://localhost:8384 Allow connections ot the Web GUI from Network Devices Open the configuration file and edit it nano /home/<user>/.config/syncthing/config.xml Change the line => <address>127.0.0.1:8384</address> To <address>0.0.0.0:8384</address> Restart Syncthing sudo systemctl restart syncthing@<user> NOTE: Now, you should be able to access the Web GUI and add shared folders. Make sure you set up a username and password in the GUI, to keep it safe. To See Available Services in Router Kernel ls /etc/init.d/ To Change Network Settings in Ubuntu via Netplan Link to Article Update the YAML file => /etc/netplan/ Example of YAML File => /home/userve/Documents/yamlexample.txt To See Partitions & Check Disk Space sudo fdisk -l To Check Hard Drive Disk Health via CLI Install smartmontools => sudo apt install smartmontools Determine which drives you want to check => sudo fdisk -l Above command will give you a list of all drives and partitions. Three Possible Tests Short Test => Sufficient for detecting issues Long Test => Used if you have concerns, as it examines the whole disk Conveyance Test => Used to test if damage occured during tranportation of the device from the manufacturer To Check Hardware Information on Linux To see info about the cpu and processing units => lscpu A report that lists detailed and brief information regarding multiple differenct hardware units, such as cpu, memory, disk, usb controllers, network adapters, etc => sudo lshw -short General purpose utility that can report detailed and brief info about multiple different hardware components => hwinfo --short To Check Power (Battery) Information via CLI Link to Article UPower Description: A command line tool for UPower which provides an interface to enumerate power sources on the system and control system-wide power management. Using the upower command => upower -i /org/freedesktop/UPower/devices/battery_BAT0 ACPI Description: Shows battery status and other ACPI information from /proc and /sys file system. To check the battery => acpi -V To just see status => acpi To see the AC adapter information => acpi -a To show thermal information => acpi -t To show thermal information in Fahrenheit => acpi -tf You can browse the same information by going to => cd /proc/acpi/ and doing, ls -al Via Directory Description: Stores ACPI information about your first battery. Command => ls -l /sys/class/power_supply/BAT0 Via GUI Description: The GUI program for the gnome power management infrastructure. It allows users to visualize their power consumption of laptop hardware. Command => gnome-power-statistics How To Use Workspaces Open the Activies Window Use Control+Alt+Up to move to the workspace shown above the current workspace in the workspace selector. Use Control+Alt+Down to move to the workspace shown below the current workspace in the workspace selector. How To Remove Directories & Files in Linux You can use the Gnome GUI You can delete directories using rmdir , rm and find NOTE You can recover files when you delete them using the GUI, but not when using the command line. To delete a directory in Linux filesystems, you are required to have write permission on the directory and its contents. If not, you will get \"Operation Not Permitted\" error. Directory names with a space in them must be escated with a backslash / . Removing Directories with rmdir To remove a directory, you can use the rmdir command line utility for deleting empty directories. Type the command followed by the name of the directory you want to remove. rmdir <directory name> If the directory is not empty, you will receive the following error: rmdir: failed to remove <directory name>: No such file or directory In the above case you will need to use the rm command or manually remove the directory contents before you delete the directory using rmdir . By default, when used without an option rm does not remove directories. Removing Directories with rm Link to Article rm is a command-line utility for deleting files and directories. Unlike rmdir the rm can delete both empty and non-empty directories. By default, when used without any option rm does not remove directories. To delete and empty directory, use the -d (--dir) option and to delete a non-empty directory, and all of its contents use the -r (--recursive or -R) option. To delete a directory with all of its contents you would type: rm -r <directory name> If a directory or a file within the directory is write-protected, you will be prompted to confirm the deletion. To remove a directory without being prompted, use the -f option. rm -rf <directory name> 10 Handy SystemD Commands: A Reference Link to Article From systemd man page => a unit file is a plain text inistyle file that encodes information about a service, a socket, a device, a mount point, an automount point, a swap file or a partition, a start-up target, a watched file system path, a timer controlled and supervised by systemd . systemd => a resource management slice, or a group of externally created processes. systemctl list-unit-files lists all unit files You can grep to see just the enabled services. $ systemctl list-unit-files | grep enabled $ systemctl list-unit-files | grep disabled Example Output Below Unit File State Vendor Preset proc-sys-fs-binfmt_misc.mount disabled enabled acpid.service disabled enabled brltty.service disabled enabled console-getty.service disabled disabled debug-shell.service disabled disabled fwupd-refresh.service static disabled openvpn3-autoload.service disabled enabled These unit files, located under /lib/systemd/system , are roughly the equivalent to the legacy init scripts that were located under /etc/rc.d/init.d . If you or your software installation created init scripts, a corresponding systemd unit file is mapped for you. Additional information can be found at /etc/rc.d/init.d/README . Wildcards An asterick ( * ) will match any characters with your query. A question mark ( ? ) will match any single character. An exclamation ( ! ) plus your sting of characters inside brackets will search for the string => [!abc] A ( : ) in front of and behind a string closed in double brackets will search for the specified class => [[:abc:]] How To Create Your Own Linux Commands Resource Used: [How to Create Your Own Commands in Linux(https://www.freecodecamp.org/news/how-to-create-your-own-command-in-linux/)] By using the alias command, you can create your own commands. Command syntax => alias [alias-name[=string]...] Example Scenerio: You go to your Videos directory regularly, so you create an alias to get the Videos directory faster. Command example => alias cdv=\"cd Videos\" How To View The Alias Command You Created Maybe your memory is not the greatest, so you cannot remember all of the alias commands you have created. To view a list of your alias commands => alias -p Please see an example of my results below: alias egrep='egrep --color=auto' alias fgrep='fgrep --color=auto' alias grep='grep --color=auto' alias l='ls -CF' alias la='ls -A' alias ll='ls -alF' alias ls='ls --color=auto' Removing an Alias Command So, you don't use your alias as much as you thought you would. In that case, lets remove it. You can remove the alias by doing => unalias alias_name Removing All Alias Commands To remove all of your alias commands, you can do the following: unalias -a Sad news about the alias command; they are not permanent. They can only be used for that terminal session. Creating a Permanent Alias To create a permanent alias command, you have to add the alias command to the shell configuration file. Common shells: Bash => ~/.bashrc Zsh => ~/.zshrc Fish => ~/.config/fish/config.fish Most Linux distros use bash . So how do we do this? Open ~/.bashrc using nano or Vim. sudo nano ~/.bashrc Go to the bottom of the file. Add the following alias cdv=\"cd Videos\" Save and exit out of the file. Close and reload the terminal. Do alias -p to confirm your alias is listed. Please see results below. alias cdv='cd Videos'","title":"Linux Commands"},{"location":"commands/#linux-cli-commands","text":"","title":"Linux CLI Commands"},{"location":"commands/#adding-a-user-in-linux","text":"To add the user => adduser <username> To verify the new user was created => ls /home or cat /etc/passwd To add user to the sudoers group => usermod -aG sudo <username> then => groups <username>","title":"Adding a User in Linux"},{"location":"commands/#changing-password-via-cli","text":"To change your password => passwd To change someone else's password => sudo passwd <user's name>","title":"Changing Password via CLI"},{"location":"commands/#apt-apt","text":"","title":"APT (apt)"},{"location":"commands/#how-to-prevent-fix-package-dependency-errors-in-ubuntu","text":"Update Package => sudo apt update Upgrade Packages => sudo apt dist-upgrade Clear Apt Package Cache => sudo apt clean Do a Mock Installation => sudo apt install --dry-run \"package name\" Remove Mock Installation => sudo apt remove --dry-run \"package name\" Fix Broken Installations => sudo apt -f install Configure Packages that Failed to Install => sudo dpkg --configure -a Use PPA-Purge (to install) => sudo apt install ppa-purge To Purge a PPA => sudo ppa-purge \"ppa:address\" Example => sudo ppa-purge ppa:geany-dev/ppa Use Aptitude Package Manager => sudo apt install aptitude NOT the same as apt To Reinstall Ubuntu Desktop Package => sudo apt install --reinstall ubuntu-desktop Pulls in essential packages that were installed by default To Remove or Disable PPAs Before Upgrading to a Newer Version of Ubuntu => sudo add-apt-repository --remove \"ppa:name\" Use Synaptic Package Manager to Disable a PPA (not removing) To Search for a Software Package => apt search <PACKAGE-NAME>","title":"How to Prevent &amp; Fix Package Dependency Errors in Ubuntu"},{"location":"commands/#copy-cp","text":"cp => commande-line utility for copying files and directories on Unix and Linux systems Command Syntax => cp [options] SOURCE... DESTINATION To Copy a File => cp file file_backup To Copy a File to Directory => cp file.txt /backup To Force Copy to Prompt for Confirmation => cp -i file.txt file_backup.txt To Copy a Directory (including all files and subdirectories) => cp -R Pictures Pictures_Backup","title":"COPY (cp)"},{"location":"commands/#dhcp-client","text":"Use this command to force Ubuntu Server 20.04 LTS to request a DHCP Client dhclient -r -v eth0 && rm /var/lib/dhcp/dhclient.* ; dhclient -v eth0","title":"DHCP Client"},{"location":"commands/#dpkg-dpkg","text":"To Install a DEB Package => sudo dpkg -i example.deb If you get => dpkg: error processing package Do => sudo apt install -f","title":"DPKG (dpkg)"},{"location":"commands/#expansion-shortcuts","text":"Resource Used => Advanced Bash Scripting Tuturial","title":"Expansion Shortcuts"},{"location":"commands/#tilde-expansion","text":"","title":"Tilde Expansion"},{"location":"commands/#brace-expansion","text":"written with braces around an expression can help with repeated commands with different terms or interpolation within a range Example1 : touch {apple,banana,cherry,durian} $ touch {apple,banana,cherry,durian} $ ls apple banana cherry durian Example2 : touch file_{1..10} $ touch file_{1..10} $ ls file_1 file_10 file_2 file_3 file_4 file_5 file_6 file_7 file_8 file_9 If you go above 10, say to 1000, the files may not sort the way you want, so you should use zero padding . [Example => touch file_{01..1000} ] The above can also be completed with letters. $ echo {A..z} A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z","title":"Brace Expansion"},{"location":"commands/#gdebi-gdebi","text":"gdeb => command to install DEB packages that will automatically download and install any required dependencies. May need to be installed => sudo apt install gdebi-core Once installed command syntax is => sudo gdebi example.deb","title":"GDEBI (gdebi)"},{"location":"commands/#ip-ip","text":"To Up/Down an Interface ip link set dev eth0 down ip link set dev eth0 up Please reference ip Command Cheat Sheet for RHEL addr => displays IP addresses and property information EX => ip addr show dev enp0s25 link => manage and display the state of all the network interfaces EX => ip link show dev enp0s25 EX => ip -s link [shows statistics] route => displays and alters the routing table EX => ip route maddr => manages and displays multicast IP addresses EX => ip maddr neigh => shows neighbor objects; also known as the ARP table for IPv4 EX => ip neigh help => displays a list of commands and arguments for each subcommand EX => ip link help EX => ip help EX => ip addr help Adjusting and Viewing Routes route add => adds an entry to the routing table EX => ip route add default via 192.168.1.1 dev enp0s25 EX => ip route add 192.168.1.0/24 via 192.168.1.1 EX => ip route add 192.168.1.0/24 dev enp0s25 route delete => deletes a routing table entry EX => ip route delete 192.168.1.0/24 via 192.168.1.1 route replace => replaces, or adds if not defined, a route EX => ip route replace 192.168.1.0/24 dev enp0s25 route get => displays the route an address will take EX => ip route get 192.168.1.5 Useful Networking Commands (Not Necessarily Provided from ip route) arping => sends an ARP request to a neighbor host EX => arping -I enp0s25 192.168.19.8 EX => arping -D -I enp0s25 192.168.19.1 [Checks for duplicate MAC addresses] ethtool => queries or controls network drive and hardware settings EX => ethtool -g eth0 EX => ethtool -i eth0 EX => ethtool -S eth0","title":"IP (ip)"},{"location":"commands/#iptables-iptables","text":"a firewall tool used to manage packet filtering & NAT rules frontend tool used to manage the Linux kernel's netfilter framework Please reference: A Tutorial for Controlling Network Traffic with IPtables Understanding IPtables Can use iptables to filter both incoming and outgoing packets as well as route network packets.","title":"IPTABLES (iptables)"},{"location":"commands/#tables","text":"(def) a collection of chains that serve a particular function. 3 Main Tables Filter => used to control the flow of packets in and out of the system. NAT => used to redirect connections to other interface on the network. Mangle => used to modify packet headers. Each table has a chain of rules. FILTER TABLE NAT TABLE MANGLE TABLE INPUT CHAIN OUTPUT CHAIN INPUT CHAIN OUTPUT CHAIN PREROUTING CHAIN OUTPUT CHAIN FORWARD CHAIN POSTROUTING CHAIN FORWARD CHAIN PREROUTING CHAIN POSTROUTING CHAIN NOTE: The Filter Table is responsible for blocking or allowing connections and is the default filter in iptables.","title":"Tables"},{"location":"commands/#chains","text":"(def) a list of rules that are processed in order. 5 main chains in iptables: Input => used to manage incoming packets/connections to service or protocol. Output => outgoing packet after it has been created/processed. Forward => forwards incoming packets from their source to destination ( routing ). Prerouting => after the packet enters the network interface. Postrouting => before the packet leaves the network interface after the routing decision has been made.","title":"Chains"},{"location":"commands/#understanding-packet-flow","text":"Incoming packets are analyzed at each chain and are tested against a set of rules. If a rules is matched, the target is set. Targets are the following: ACCEPT => Stop processing and let the packet flow. REJECT => Drops the packet with feedback. DROP => Stops the processing at the current chain and drops the packet. LOG => Similar to ACCEPT, but it is logged to /var/log/messages As an example, say you want to block all incoming connections to your web server on port 80. Example packet flow: Add a rule to the incoming chain in the filter table. Set the target to REJECT . If the target gets to the end of the chain without matching any rules, the default rule is used. If there is no default rule, the packet is accepted.","title":"Understanding Packet Flow"},{"location":"commands/#installing-iptables","text":"iptables is an included utility by default. Recommendation is to disable or delete any rules you have before beginning or creating a new configuration. You must uninstall any other firewall management utilities like UFW. To install => sudo apt install iptables Default config file for iptables => /etc/sysconfig/iptables . Can be modified using text editor of your choice. EX => vim /etc/sysconfig/iptables","title":"Installing IPtables"},{"location":"commands/#using-iptables","text":"","title":"Using IPtables"},{"location":"commands/#building-iptables-commands","text":"Some common command options. See iptables man page. EX => sudo iptables -t filter -I INPUT -m tcp -p tcp --dport 80 -j REJECT The above command blocks any incoming traffic to the web server.","title":"Building IPtables Commands"},{"location":"commands/#listing-chains","text":"To see all the available chains in the filter table by using the list command. EX => sudo iptables -L EX => sudo iptables -L -nv This will display the INPUT , OUTPUT and FORWARD chains.","title":"Listing Chains"},{"location":"commands/#specifying-default-policy","text":"If you have a fresh configuration or no predefined rules, you should set the default target policy. In the example below, the default policy is set to ACCEPT , which means all traffic is accepted by default. To set default policy: sudo iptables --policy INPUT ACCEPT sudo iptables --policy FORWARD ACCEPT sudo iptables --policy OUTPUT ACCEPT To disable access, just use DROP or REJECT instead of ACCEPT .","title":"Specifying Default Policy"},{"location":"commands/#blocking-allowing-connections-from-ip-addresses","text":"192.168.1.1 is the example IP; replace with your IP. To block all incoming requests from an IP address: sudo iptables -A INPUT -s 192.168.1.1 -j DROP To block all incoming connections from an entire subnet sudo iptables -A INPUT -s 192.168.1.1/24 -j DROP To block all outgoing connections to a particular IP or subnet add the following OUTPUT chain sudo iptables -I OUTPUT -s 192.168.1.1 -j DROP","title":"Blocking &amp; Allowing Connections From IP Addresses"},{"location":"commands/#blocking-allowing-connections-to-ports","text":"To block connections to ports and services, specify the protocol and the destination port. To block any incoming SSH connections to the server: sudo iptables -I INPUT -p tcp --dport 22 -j DROP To block any incoming connections to your web server: running on port 80 sudo iptables -I INPUT -p tcp --dport 80 -j DROP To block an IP from connecting to a specific service: sudo iptables -I INPUT -p tcp --dport 80 -s 10.10.10.1 -j DROP Deeper dive into the iptables command to block all traffic: iptables -A INPUT -j DROP -p tcp --destination-port 110 -i eth0 -A => will add or append the rule to the end of the chain. INPUT => will add the rule to the table. DROP => packets will be discarded. -p tcp => means the rule will only drop TCP packets. --destination-port 110 => filters packets targeted to port 110. -i eth0 => means this rule will only impact packets arriving on the eth0 interface. NOTE: iptables does NOT recognize aliases on the network interface. If you have virtual interfaces, then you will have to specify the destination IP address. iptables -A INPUT -j DROP -p tcp --destination-port 110 -i eth0 -d 192.168.100.0","title":"Blocking &amp; Allowing Connections To Ports"},{"location":"commands/#saving-changes","text":"To save the changes you have made to your rule-set, so they are persistent: sudo /sbin/iptables-save","title":"Saving Changes"},{"location":"commands/#deleting-clearing-rules","text":"If you want to delete a specific rule, you need to determine the rule line number. To do this, list the chains and the rules with the following options: sudo iptables -L --line-numbers The above lists the relevant line numbers for each rule. After determining the line number, you can delete with the following: sudo iptables -D INPUT 3 To clear all the rules and start over: sudo iptables -F","title":"Deleting &amp; Clearing Rules"},{"location":"commands/#kill-killall-killkillall","text":"killall => a tool for terminating running processes on your system based on name kill => terminates processes based on Process ID number (PID) both kill and killall can also send specific system signals to processes use killall and kill with tools such as Process Status ps , to manage and end processes that are stuck or unresponsive.","title":"KILL &amp; KILLALL (kill,killall)"},{"location":"commands/#killall-usage","text":"will terminate all programs that match the specified name. sends SIGTERM or signal number, which terminates running processes that match the name. you can also specify a different signal using -s option as follow: killall -s 9 <process name> the above sends the SIGKILL signal which is more successful at ending unruly processes. can also specify signals in one of the following formats: killall -KILL <process name> killall -SIGKILL <process name> killall -9 <process name>","title":"killall Usage"},{"location":"commands/#kill-usage","text":"kill => command terminates individual processes or specified by their PID kill <PID> without options, KILL sends SIGTERM to the PID specified and asks the application or service to shut itself down. Multiple PIDs and alternate system signals can be specified within a single KILL command The following examples all send the SIGKILL signal to the PID specified: kill -s KILL <PID> kill -KILL <PID>","title":"kill Usage"},{"location":"commands/#system-signals","text":"The KILL command does NOT terminate a process directly. Alternatively, a signal is sent to the process where the process will have instructions to follow if it receives a given signal. For further reference => man 7 signal","title":"System Signals"},{"location":"commands/#standard-signals","text":"Signal Value Action Comment SIGHUP 1 Term Hangup detected on controlling terminal or death SIGINT 2 Term Interrupt from keyboard SIGQUIT 3 Core Quit from keyboard SIGILL 4 Core Illegal Instruction SIGABRT 6 Core Abort signal from abort(3) SIGFPE 8 Core Floating-point exception SIGKILL 9 Term Kill signal SIGSERV 11 Core Invalid memory reference SIGPIPE 13 Term Broken pipe: write to pipe with no readers; see pipe (7) SIGALRM 14 Term Timer signal from alarm (2) SIGTERM 15 Term Termination signal SIGUSR1 30,10,16 Term User-defined signal 1 SIGUSR2 31,12,17 Term User-defined signal 2 SIGCHLD 20,17,18 Ign Child stopped/terminated SIGCONT 19,18,25 Cont Continue if stopped SIGSTOP 17,19,23 Stop Stop process SIGTSTP 18,20,24 Stop Stop typed at terminal SIGTTIN 21,21,26 Stop Terminal input for background SIGTTOU 22,22,27 Stop Terminal output for background To list ALL available signals without descriptions kill -l killall -l To convert a signal name to a number, or vice versa: kill -l 9 kill -l kill","title":"Standard Signals"},{"location":"commands/#finding-running-processes","text":"Use ps command to view processes that are currently runing and their PIDs ps aux | grep \"emacs\" => simple search for \"emacs\" Example Results: manhands 20002 0.0 0.0 9080 2560 pts/0 S+ 13:30 0:00 grep --color=auto emacs Can also use ps auxf to view hierarchal tree of processes.","title":"Finding Running Processes"},{"location":"commands/#verifying-process-termination","text":"Adding the -w option to a killall command causes killall to wait until the process terminates before exiting. killall -w irssi Example issues SIGTERM system signal to a background process with a name that matches irssi killall will wait until the matched process ends If no process matches the name specified, killall returns an error message: killall -w irssi => irssi:no process found","title":"Verifying Process Termination"},{"location":"commands/#links-ln","text":"ln creates hard and symbolic links ln <filename> <link_name>","title":"LINKS (ln)"},{"location":"commands/#hard-link","text":"ln <filename> <linkname> original way of creating links creates an additional link to a file cannot reference a directory","title":"Hard Link"},{"location":"commands/#symbolic-link","text":"more modern approach to links think of it as a ln -s <filename> <link_name>","title":"Symbolic Link"},{"location":"commands/#move-mv","text":"Moves files To move a file, do the following: mv source_file... target_dir","title":"MOVE (mv)"},{"location":"commands/#removing-crash-report-files","text":"Crash report files are located in => /var/crash To remove them, do the following: cd /var/crash/ ls sudo rm /var/crash","title":"Removing Crash Report Files"},{"location":"commands/#secure-copy-scp","text":"Resource => How to Use SCP Command to Securely Transfer Files Description: Secure Copy scp is a command line utility that allows you to securely copy files and directories between two locations. Command Syntax: scp [OPTION] [user@]SRC_HOST:]file1 [user@]DEST_HOST:]file2 OPTION - scp options such as cipher, ssh configuration, ssh port, limit, recursive copy...etc. [user@]SRC_HOST:]file1 = Source File [user@]DEST_HOST:]file2 = Destination File","title":"SECURE COPY (scp)"},{"location":"commands/#system-log-rsyslog","text":"REFERENCE : How to Create a Centralized Log Server with Rsyslog stored in /var/log can act as a client or a server Ex of syslog log message scheme: type (facility).priority (severity) destination(where to send the log) A facility is represented by the internal system processes that generates the messages. In Linux interal processes (aka \"facilities\") that generate logs are standardized as follows: auth => messages generated by authentication processes (logins). cron => messages generated by scheduled processes (crontab). daemon => messages generated by daemons (internal services). kernel => messges generated by the Linux kernel. mail => messages generated by a mail server. syslog => messages generated by the rsyslog daemon itself. lpr => messages generated by local printers or a print server. local0-local7 => custom messages definted by an administrator (local7 is usually assigned for Cisco or Windows). The priority (severity) levels are standardized as well. Each priority is assigned with a standard abbreviation and a number as described below. emerg => Emergency - 0 alert => Alerts - 1 err => Errors - 3 warn => Warnings - 4 notice => Notification - 5 info => Information - 6 debug => Debugging - 7 3rd part of the syslog schema is represented by the destination directive. Rsyslog daemon can send log messages to be written in a file on a local filesystem (ex. /var/log ), it can be piped to another local process, sent to a local user console (ex. to stdout ), sent via a message to a remote syslog server via TCP/UDP protocol, or even discard the message (ex. /dev/null ) To check if the rsyslog service is installed and/or running => systemctl status rsyslog.service If not running => systemctl start rsyslog.service If not installed => sudo apt-get install rsyslog To configure rsyslog => sudo vim /etc/rsyslog.conf To confirm service is running on configured ports => ss -tunelp | grep 514","title":"System Log (rsyslog)"},{"location":"commands/#tcpdump-tcpdump","text":"REFERENCE : 12 TCPDUMP Commands - A Network Sniffer Tool Packer sniffer tool Offers the ability to save the tcpdump output to a pcap file. Example => tcpdump -i eth1 -s 65535 -w <filename>.pcap Command Syntax: From a specific interface => tcpdump -i eth0 Capture specified amount of packets => tcpdump -c 5 -i eth0 To display available interfaces => tcpdump -D To capture and save packets in a file => tcpdump -w <filename> -i eth0 Read captured packets file => tcpdump -r <filename> Capture IP address packets => tcpdump -n -i eth0 To capture only TCP packets => tcpdump -i eth0 tcp To capture packets on a specific port => tcpdump -i eth0 port 22 To capture packets from a source IP => tcpdump -i eth0 src <IP address> To capture packets from a destination IP => tcpdump -i eth0 dst <IP address>","title":"TCPDUMP (tcpdump)"},{"location":"commands/#tree-tree","text":"Lists the content of directories in a tree-like format To run tree in a directory that requires root user permissions => sudo tree To display contents, while including hidden files, use the -a flag => sudo tree -a To see the full path prefix => sudo tree -f To see the subdirectories, minus the files in them => sudo tree -d To specify the maximum display depth of the directory, use the -L flag => sudo tree -L 2 To only display files that match a specific wild-card pattern, user the -P flag => sudo tree -P cata* To eliminate empty directories, you can use the --prune option => sudo tree --prune If you would like to see the file permissions, then do => sudo tree -p If you would like to redirect the output to a text file => sudo tree -o <filename>","title":"TREE (tree)"},{"location":"commands/#customizing-your-terminal","text":"","title":"Customizing Your Terminal"},{"location":"commands/#syncthing-install-configuration","text":"Downloaded install file at Syncthing Downloads Did the install via the CLI below location to download the .deb file Resource I used to install and configure this was listed on Journal Date 20200917 Added systemd unit wget https://raw.githubusercontent.com/syncthing/syncthing/main/etc/linux-systemd/system/syncthing%40.service sudo chown root: syncthing@.service sudo mv syncthing@.service /etc/systemd/system sudo systemctl daemon-reload Enable & Start the Unit sudo systemctl enable syncthing@<user> sudo systemctl start syncthing@<user> Access the Web GUI for Synchting http://localhost:8384 Allow connections ot the Web GUI from Network Devices Open the configuration file and edit it nano /home/<user>/.config/syncthing/config.xml Change the line => <address>127.0.0.1:8384</address> To <address>0.0.0.0:8384</address> Restart Syncthing sudo systemctl restart syncthing@<user> NOTE: Now, you should be able to access the Web GUI and add shared folders. Make sure you set up a username and password in the GUI, to keep it safe.","title":"Syncthing Install &amp; Configuration"},{"location":"commands/#to-see-available-services-in-router-kernel","text":"ls /etc/init.d/","title":"To See Available Services in Router Kernel"},{"location":"commands/#to-change-network-settings-in-ubuntu-via-netplan","text":"Link to Article Update the YAML file => /etc/netplan/ Example of YAML File => /home/userve/Documents/yamlexample.txt","title":"To Change Network Settings in Ubuntu via Netplan"},{"location":"commands/#to-see-partitions-check-disk-space","text":"sudo fdisk -l","title":"To See Partitions &amp; Check Disk Space"},{"location":"commands/#to-check-hard-drive-disk-health-via-cli","text":"Install smartmontools => sudo apt install smartmontools Determine which drives you want to check => sudo fdisk -l Above command will give you a list of all drives and partitions. Three Possible Tests Short Test => Sufficient for detecting issues Long Test => Used if you have concerns, as it examines the whole disk Conveyance Test => Used to test if damage occured during tranportation of the device from the manufacturer","title":"To Check Hard Drive Disk Health via CLI"},{"location":"commands/#to-check-hardware-information-on-linux","text":"To see info about the cpu and processing units => lscpu A report that lists detailed and brief information regarding multiple differenct hardware units, such as cpu, memory, disk, usb controllers, network adapters, etc => sudo lshw -short General purpose utility that can report detailed and brief info about multiple different hardware components => hwinfo --short","title":"To Check Hardware Information on Linux"},{"location":"commands/#to-check-power-battery-information-via-cli","text":"Link to Article","title":"To Check Power (Battery) Information via CLI"},{"location":"commands/#upower","text":"Description: A command line tool for UPower which provides an interface to enumerate power sources on the system and control system-wide power management. Using the upower command => upower -i /org/freedesktop/UPower/devices/battery_BAT0","title":"UPower"},{"location":"commands/#acpi","text":"Description: Shows battery status and other ACPI information from /proc and /sys file system. To check the battery => acpi -V To just see status => acpi To see the AC adapter information => acpi -a To show thermal information => acpi -t To show thermal information in Fahrenheit => acpi -tf You can browse the same information by going to => cd /proc/acpi/ and doing, ls -al","title":"ACPI"},{"location":"commands/#via-directory","text":"Description: Stores ACPI information about your first battery. Command => ls -l /sys/class/power_supply/BAT0","title":"Via Directory"},{"location":"commands/#via-gui","text":"Description: The GUI program for the gnome power management infrastructure. It allows users to visualize their power consumption of laptop hardware. Command => gnome-power-statistics","title":"Via GUI"},{"location":"commands/#how-to-use-workspaces","text":"Open the Activies Window Use Control+Alt+Up to move to the workspace shown above the current workspace in the workspace selector. Use Control+Alt+Down to move to the workspace shown below the current workspace in the workspace selector.","title":"How To Use Workspaces"},{"location":"commands/#how-to-remove-directories-files-in-linux","text":"You can use the Gnome GUI You can delete directories using rmdir , rm and find NOTE You can recover files when you delete them using the GUI, but not when using the command line. To delete a directory in Linux filesystems, you are required to have write permission on the directory and its contents. If not, you will get \"Operation Not Permitted\" error. Directory names with a space in them must be escated with a backslash / .","title":"How To Remove Directories &amp; Files in Linux"},{"location":"commands/#removing-directories-with-rmdir","text":"To remove a directory, you can use the rmdir command line utility for deleting empty directories. Type the command followed by the name of the directory you want to remove. rmdir <directory name> If the directory is not empty, you will receive the following error: rmdir: failed to remove <directory name>: No such file or directory In the above case you will need to use the rm command or manually remove the directory contents before you delete the directory using rmdir . By default, when used without an option rm does not remove directories.","title":"Removing Directories with rmdir"},{"location":"commands/#removing-directories-with-rm","text":"Link to Article rm is a command-line utility for deleting files and directories. Unlike rmdir the rm can delete both empty and non-empty directories. By default, when used without any option rm does not remove directories. To delete and empty directory, use the -d (--dir) option and to delete a non-empty directory, and all of its contents use the -r (--recursive or -R) option. To delete a directory with all of its contents you would type: rm -r <directory name> If a directory or a file within the directory is write-protected, you will be prompted to confirm the deletion. To remove a directory without being prompted, use the -f option. rm -rf <directory name>","title":"Removing Directories with rm"},{"location":"commands/#10-handy-systemd-commands-a-reference","text":"Link to Article From systemd man page => a unit file is a plain text inistyle file that encodes information about a service, a socket, a device, a mount point, an automount point, a swap file or a partition, a start-up target, a watched file system path, a timer controlled and supervised by systemd . systemd => a resource management slice, or a group of externally created processes. systemctl list-unit-files lists all unit files You can grep to see just the enabled services. $ systemctl list-unit-files | grep enabled $ systemctl list-unit-files | grep disabled Example Output Below Unit File State Vendor Preset proc-sys-fs-binfmt_misc.mount disabled enabled acpid.service disabled enabled brltty.service disabled enabled console-getty.service disabled disabled debug-shell.service disabled disabled fwupd-refresh.service static disabled openvpn3-autoload.service disabled enabled These unit files, located under /lib/systemd/system , are roughly the equivalent to the legacy init scripts that were located under /etc/rc.d/init.d . If you or your software installation created init scripts, a corresponding systemd unit file is mapped for you. Additional information can be found at /etc/rc.d/init.d/README .","title":"10 Handy SystemD Commands: A Reference"},{"location":"commands/#wildcards","text":"An asterick ( * ) will match any characters with your query. A question mark ( ? ) will match any single character. An exclamation ( ! ) plus your sting of characters inside brackets will search for the string => [!abc] A ( : ) in front of and behind a string closed in double brackets will search for the specified class => [[:abc:]]","title":"Wildcards"},{"location":"commands/#how-to-create-your-own-linux-commands","text":"Resource Used: [How to Create Your Own Commands in Linux(https://www.freecodecamp.org/news/how-to-create-your-own-command-in-linux/)] By using the alias command, you can create your own commands. Command syntax => alias [alias-name[=string]...] Example Scenerio: You go to your Videos directory regularly, so you create an alias to get the Videos directory faster. Command example => alias cdv=\"cd Videos\"","title":"How To Create Your Own Linux Commands"},{"location":"commands/#how-to-view-the-alias-command-you-created","text":"Maybe your memory is not the greatest, so you cannot remember all of the alias commands you have created. To view a list of your alias commands => alias -p Please see an example of my results below: alias egrep='egrep --color=auto' alias fgrep='fgrep --color=auto' alias grep='grep --color=auto' alias l='ls -CF' alias la='ls -A' alias ll='ls -alF' alias ls='ls --color=auto'","title":"How To View The Alias Command You Created"},{"location":"commands/#removing-an-alias-command","text":"So, you don't use your alias as much as you thought you would. In that case, lets remove it. You can remove the alias by doing => unalias alias_name","title":"Removing an Alias Command"},{"location":"commands/#removing-all-alias-commands","text":"To remove all of your alias commands, you can do the following: unalias -a Sad news about the alias command; they are not permanent. They can only be used for that terminal session.","title":"Removing All Alias Commands"},{"location":"commands/#creating-a-permanent-alias","text":"To create a permanent alias command, you have to add the alias command to the shell configuration file. Common shells: Bash => ~/.bashrc Zsh => ~/.zshrc Fish => ~/.config/fish/config.fish Most Linux distros use bash . So how do we do this? Open ~/.bashrc using nano or Vim. sudo nano ~/.bashrc Go to the bottom of the file. Add the following alias cdv=\"cd Videos\" Save and exit out of the file. Close and reload the terminal. Do alias -p to confirm your alias is listed. Please see results below. alias cdv='cd Videos'","title":"Creating a Permanent Alias"},{"location":"docker/","text":"Docker UDEMY Class Notes Section 1 Docker is a platform that lets you package, develop and run applications in containers. a virutal environment on top of the OS kernel to capture all of its sw-libraries, dependencies, etc. insert image from notes here isolated from other containers lightweight approach, more so than virtual machines. portability to major architectures and OS's able to achieve continuous integration & deployment for DevOps Main Features create images and containers docker-compose for multi-container apps docker swarm to utilize multiple machines running Docker Installing Docker on Ubuntu Download Docker Install Script => wget -qO- https://get.docker.com/ | sh sudo usermod -aG docker $(whoami) Restart OS Try docker and docker container ls To verify your Docker version => docker --version Docker Essentials Resource : Learn Linux YouTube Series by Jay LaCroix => Docker Essentials Part 3 - Installing Docker on Windows 10, macOS and Ubuntu For Ubuntu Make sure that your system is the most up to date. sudo apt update sudo apt dist-upgrade Run systemctl status docker to see if Docker is running. If it is showing as disbled, then you can run sudo systemctl enable docker If it is not started, then you can run sudo systemctl start docker To confirm that Docker is working, you can run sudo docker run hello-world To make sure that you don't always have to run commands with sudo , you can do sudo usermod -aG docker <userid> Restart system after adding yourself to the Docker group. Part 4 - Running Containers docker images => will show you all available images on your machine. Since we ran the hello-world image in the previous step, the docker image should be listed in the results. docker search <imagename> => will show you all available images with the name ubuntu docker pull <imagename> => will download the image docker run <imagename> = will run the image you want to create your container in Note if you run a container and there is nothing for it to do, then it will just exit. For example, if you just type docker run ubuntu , then nothing will happen because you did not tell it do anything. docker ps => list of Docker images running on your machine. docker ps -a => list of Docker images that have been run on your machine. To attempt to keep a container running, you can run => docker run -it ubuntu /bin/bash it => i stands for interactive; t stands for tty or terminal Part 5 - Making Containers Persist Using the same command as above => docker run -it ubuntu /bin/bash Add -d to keep it running in the background => docker run -it -d ubuntu /bin/bash -d stands for daemon (a service running in the background) To confirm the container is still running, run docker ps Results :CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b677c09360ba ubuntu \"/bin/bash\" 3 minutes ago Up 3 minutes naughty_jones How to attach yourselft to a container => docker attach <containerID> Results : prompt changes to root@<containerID> How to exit a container while leaving the container running => Ctrl+pq Part 6 - Accessing Containerized Applications Let's try running a different container => docker run nginx Nginx is a proxy and web server docker run -it -d -p 8080:80 nginx -p means port Here we are opening port 8080 on our host computer and opening port 80 on the docker container. Then, do docker ps to make sure that your container is running. Since nginx is a webserver, you can type <ipaddress of host>:8080 in to a browser, and you will see the nginx main screen popup. Any computer on your network should be able to bring up the webpage. To see the Nginx container running do a docker ps To stop the container from running you can do => docker stop <containerID> Now do => docker run -it -d --restart unless-stopped -p 8080:80 nginx The restart unless-stopped is very helpful so you can do a Ctrl+C without stopping the container from running. Part 7: Creating Images Last video in the series. Create an Ubuntu image docker run -it ubuntu apt update apt dist-upgrade apt install apache2 To see if apache is running => /etc/init.d/apache2 status To start it => /etc/init.d/apache2 start Let's install vim => apt install vim-nox Now, lets save all of these changes, so we do not lose them. Do, docker ps to obtain the Container ID. Then, do docker commit <containerID> <newname>:<versioninfo> My example => docker commit 5db0e25d6ca0 ubuntu/apache-test:1.0 You receive a sha256 hash. Then do docker images and you should see your image listed. Now, lets stop everything and go back in and see if we can still get to our image. docker stop <containerID> Do docker ps to make sure nothing is running. Since you have confirmed nothing is running, lets try to locate and use our image we created earlier. docker run -d -it -p 8080:80 <imagename> For my example, it would be docker run -d -it -p 8080:80 ubuntu/apache-test:1.0 Do docker ps Since it is running, lets bring up a webpage, using same webpage we used earlier, which was <IPaddress:8080> Doh, it does not work. Why? Because Apache is not running, as we did not create an entry point. Lets add an entry point => docker commit --change='ENTRYPOINT [\"apachectl\", \"-DFOREGROUND\"]' c26 ubuntu/apache-test:1.1 Receive SHA256 hash again Do docker images You should see both of your images Do docker ps to see your running containers Stop the original container that is still running => docker stop <containerID> Then recall the last command via the up arrow, just change the version from 1.0 to 1.1. Hit enter. Do docker ps to see insure your image is running. Now, lets try to bring up the webpage again. You should now see the Apache2 Default page. Now, lets automate this entire process by creating text file, known as a docker file docker build -t ubuntu/apache-test:1.2 . DockerFile To remove Docker images => docker rmi <imageID> To remove Docker containers => docker rm <containerID> If you are receiving messages that state you are unable to remove an image because a container is using it, then do docker ps -a or docker ps -a | grep <containerID> . You can confirm the image is removed by doing docker images","title":"Docker"},{"location":"docker/#docker","text":"","title":"Docker"},{"location":"docker/#udemy-class-notes","text":"","title":"UDEMY Class Notes"},{"location":"docker/#section-1","text":"Docker is a platform that lets you package, develop and run applications in containers. a virutal environment on top of the OS kernel to capture all of its sw-libraries, dependencies, etc. insert image from notes here isolated from other containers lightweight approach, more so than virtual machines. portability to major architectures and OS's able to achieve continuous integration & deployment for DevOps","title":"Section 1"},{"location":"docker/#main-features","text":"create images and containers docker-compose for multi-container apps docker swarm to utilize multiple machines running Docker","title":"Main Features"},{"location":"docker/#installing-docker-on-ubuntu","text":"Download Docker Install Script => wget -qO- https://get.docker.com/ | sh sudo usermod -aG docker $(whoami) Restart OS Try docker and docker container ls To verify your Docker version => docker --version","title":"Installing Docker on Ubuntu"},{"location":"docker/#docker-essentials","text":"Resource : Learn Linux YouTube Series by Jay LaCroix => Docker Essentials","title":"Docker Essentials"},{"location":"docker/#part-3-installing-docker-on-windows-10-macos-and-ubuntu","text":"For Ubuntu Make sure that your system is the most up to date. sudo apt update sudo apt dist-upgrade Run systemctl status docker to see if Docker is running. If it is showing as disbled, then you can run sudo systemctl enable docker If it is not started, then you can run sudo systemctl start docker To confirm that Docker is working, you can run sudo docker run hello-world To make sure that you don't always have to run commands with sudo , you can do sudo usermod -aG docker <userid> Restart system after adding yourself to the Docker group.","title":"Part 3 - Installing Docker on Windows 10, macOS and Ubuntu"},{"location":"docker/#part-4-running-containers","text":"docker images => will show you all available images on your machine. Since we ran the hello-world image in the previous step, the docker image should be listed in the results. docker search <imagename> => will show you all available images with the name ubuntu docker pull <imagename> => will download the image docker run <imagename> = will run the image you want to create your container in Note if you run a container and there is nothing for it to do, then it will just exit. For example, if you just type docker run ubuntu , then nothing will happen because you did not tell it do anything. docker ps => list of Docker images running on your machine. docker ps -a => list of Docker images that have been run on your machine. To attempt to keep a container running, you can run => docker run -it ubuntu /bin/bash it => i stands for interactive; t stands for tty or terminal","title":"Part 4 - Running Containers"},{"location":"docker/#part-5-making-containers-persist","text":"Using the same command as above => docker run -it ubuntu /bin/bash Add -d to keep it running in the background => docker run -it -d ubuntu /bin/bash -d stands for daemon (a service running in the background) To confirm the container is still running, run docker ps Results :CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b677c09360ba ubuntu \"/bin/bash\" 3 minutes ago Up 3 minutes naughty_jones How to attach yourselft to a container => docker attach <containerID> Results : prompt changes to root@<containerID> How to exit a container while leaving the container running => Ctrl+pq","title":"Part 5 - Making Containers Persist"},{"location":"docker/#part-6-accessing-containerized-applications","text":"Let's try running a different container => docker run nginx Nginx is a proxy and web server docker run -it -d -p 8080:80 nginx -p means port Here we are opening port 8080 on our host computer and opening port 80 on the docker container. Then, do docker ps to make sure that your container is running. Since nginx is a webserver, you can type <ipaddress of host>:8080 in to a browser, and you will see the nginx main screen popup. Any computer on your network should be able to bring up the webpage. To see the Nginx container running do a docker ps To stop the container from running you can do => docker stop <containerID> Now do => docker run -it -d --restart unless-stopped -p 8080:80 nginx The restart unless-stopped is very helpful so you can do a Ctrl+C without stopping the container from running.","title":"Part 6 - Accessing Containerized Applications"},{"location":"docker/#part-7-creating-images","text":"Last video in the series. Create an Ubuntu image docker run -it ubuntu apt update apt dist-upgrade apt install apache2 To see if apache is running => /etc/init.d/apache2 status To start it => /etc/init.d/apache2 start Let's install vim => apt install vim-nox Now, lets save all of these changes, so we do not lose them. Do, docker ps to obtain the Container ID. Then, do docker commit <containerID> <newname>:<versioninfo> My example => docker commit 5db0e25d6ca0 ubuntu/apache-test:1.0 You receive a sha256 hash. Then do docker images and you should see your image listed. Now, lets stop everything and go back in and see if we can still get to our image. docker stop <containerID> Do docker ps to make sure nothing is running. Since you have confirmed nothing is running, lets try to locate and use our image we created earlier. docker run -d -it -p 8080:80 <imagename> For my example, it would be docker run -d -it -p 8080:80 ubuntu/apache-test:1.0 Do docker ps Since it is running, lets bring up a webpage, using same webpage we used earlier, which was <IPaddress:8080> Doh, it does not work. Why? Because Apache is not running, as we did not create an entry point. Lets add an entry point => docker commit --change='ENTRYPOINT [\"apachectl\", \"-DFOREGROUND\"]' c26 ubuntu/apache-test:1.1 Receive SHA256 hash again Do docker images You should see both of your images Do docker ps to see your running containers Stop the original container that is still running => docker stop <containerID> Then recall the last command via the up arrow, just change the version from 1.0 to 1.1. Hit enter. Do docker ps to see insure your image is running. Now, lets try to bring up the webpage again. You should now see the Apache2 Default page. Now, lets automate this entire process by creating text file, known as a docker file docker build -t ubuntu/apache-test:1.2 . DockerFile To remove Docker images => docker rmi <imageID> To remove Docker containers => docker rm <containerID> If you are receiving messages that state you are unable to remove an image because a container is using it, then do docker ps -a or docker ps -a | grep <containerID> . You can confirm the image is removed by doing docker images","title":"Part 7: Creating Images"},{"location":"gitnotes/","text":"GitHub Notes Setting Up and Configuring You Git Repo SSH Keys To generate a SSH key => ssh-keygen -t rsa -b 4096 -C \"emailaddress\" Default file location => /user/mholdiman/.ssh/id_rsa To search for newly generated key => ls | grep <filename> To see your public key => cat <filename>.pub You can copy from the terminal and paste into GitHub, or you can do pbcopy < ~/<filename>.pub Adding you SSH key to the ssh-agent Start the ssh-agent in the background => eval \"$(ssh-agent -s)\" Add your SSH private key to the ssh-agent and store your passphrase in the keychain. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_rsa in the command with the name of your private key file => ssh-add -K ~/.ssh/id_rsa Git Push git push origin master => Tells git to push the changes you made locally (origin) to the GitHub branch (master) What if you start a repo locally? Open folder in Visual Studio Code If not a git repo, then do git init Do git status , to see status of repo. To push this live, you would do git push origin master However, if the repo is not on GitHub, then you will need to create a new repo on GitHub Copy SSH Link from GitHub Do git remote add origin <paste SSH Link from GitHub> Then do git remote -v to verify Now, you should be able to do git push origin master In the future, you could just type in git push , but you need to set an upstream first. Shortcut => git push -u origin master GitHub Workflow (Online) Creating Code Write Code Commit Changes Adding To / Editing Someone Else's Code If it is not our code, then we can do what is called a pull request. Workflow => Write Code > Commit Changes > Make a Pull Request GitHub Workflow (Local) Write Code Stage Changes git add Commit Changes git commit Push Changes git push Make a Pull Request > Push Changes git push > Make a Pull Request Git Branching Master Branch => default branch in GitHub. We can also create a Feature Branch Each individual branch does not know about changes to any other branches. Why is this useful? When rolling out new features, you can test it here. It is a sandboxed environment. git branch => shows what branch you are currently in Example => *master (END) To create a new branch => git checkout To create a new branch and name the branch => git checkout -b <new branch name> To see differences between files => git diff <branch name of the one that you want to compare it to> Instead of doing a git merge , it is more common to push the changes to GitHub in the repo you are in, and then merge in GitHub. Pull Requests aka PRs What is a pull request? Get your code pulled into another branch You make a PR from feature branch to the master branch Once it is merged, you remove the branch You do the pull request in GitHub and then do another pull request to update your local system => git pull origin master Now that your branch has been merged with the master, you can delete the branch => git branch -d <branch name>","title":"GitHub"},{"location":"gitnotes/#github-notes","text":"","title":"GitHub Notes"},{"location":"gitnotes/#setting-up-and-configuring-you-git-repo","text":"","title":"Setting Up and Configuring You Git Repo"},{"location":"gitnotes/#ssh-keys","text":"To generate a SSH key => ssh-keygen -t rsa -b 4096 -C \"emailaddress\" Default file location => /user/mholdiman/.ssh/id_rsa To search for newly generated key => ls | grep <filename> To see your public key => cat <filename>.pub You can copy from the terminal and paste into GitHub, or you can do pbcopy < ~/<filename>.pub","title":"SSH Keys"},{"location":"gitnotes/#adding-you-ssh-key-to-the-ssh-agent","text":"Start the ssh-agent in the background => eval \"$(ssh-agent -s)\" Add your SSH private key to the ssh-agent and store your passphrase in the keychain. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_rsa in the command with the name of your private key file => ssh-add -K ~/.ssh/id_rsa","title":"Adding you SSH key to the ssh-agent"},{"location":"gitnotes/#git-push","text":"git push origin master => Tells git to push the changes you made locally (origin) to the GitHub branch (master)","title":"Git Push"},{"location":"gitnotes/#what-if-you-start-a-repo-locally","text":"Open folder in Visual Studio Code If not a git repo, then do git init Do git status , to see status of repo. To push this live, you would do git push origin master However, if the repo is not on GitHub, then you will need to create a new repo on GitHub Copy SSH Link from GitHub Do git remote add origin <paste SSH Link from GitHub> Then do git remote -v to verify Now, you should be able to do git push origin master In the future, you could just type in git push , but you need to set an upstream first. Shortcut => git push -u origin master","title":"What if you start a repo locally?"},{"location":"gitnotes/#github-workflow-online","text":"","title":"GitHub Workflow (Online)"},{"location":"gitnotes/#creating-code","text":"Write Code Commit Changes","title":"Creating Code"},{"location":"gitnotes/#adding-to-editing-someone-elses-code","text":"If it is not our code, then we can do what is called a pull request. Workflow => Write Code > Commit Changes > Make a Pull Request","title":"Adding To / Editing Someone Else's Code"},{"location":"gitnotes/#github-workflow-local","text":"Write Code Stage Changes git add Commit Changes git commit Push Changes git push Make a Pull Request > Push Changes git push > Make a Pull Request","title":"GitHub Workflow (Local)"},{"location":"gitnotes/#git-branching","text":"Master Branch => default branch in GitHub. We can also create a Feature Branch Each individual branch does not know about changes to any other branches. Why is this useful? When rolling out new features, you can test it here. It is a sandboxed environment. git branch => shows what branch you are currently in Example => *master (END) To create a new branch => git checkout To create a new branch and name the branch => git checkout -b <new branch name> To see differences between files => git diff <branch name of the one that you want to compare it to> Instead of doing a git merge , it is more common to push the changes to GitHub in the repo you are in, and then merge in GitHub.","title":"Git Branching"},{"location":"gitnotes/#pull-requests-aka-prs","text":"What is a pull request? Get your code pulled into another branch You make a PR from feature branch to the master branch Once it is merged, you remove the branch You do the pull request in GitHub and then do another pull request to update your local system => git pull origin master Now that your branch has been merged with the master, you can delete the branch => git branch -d <branch name>","title":"Pull Requests aka PRs"},{"location":"javascript/","text":"JavaScript Course: JavaScript Algorithms and Data Structures Certification NOTE from freeCodeCamp Comment Your JavaScript Code Comments are lines of code that JavaScript will intentionally ignore. Leave notes for yourself and others who are reading your code. To leave an in-line comment. // This is an in-line comment. To leave a multi-line comment beginning with /* and ending with */ . Here is an example: /* This is a multi -line comment */ Declare JavaScript Variables Data is anything that is meaningful to the computer. undefined null boolean string symbol bigint number object Computer's need to be able to distinguish between numbers and strings, such as \"12\" and \"123 dogs\". Whereas, \"12\" is a number , and \"123 dogs\" should be processed as a string . Variables allow computers to store and manipulate data. Any of the above eight data types may be stored as a variable. Computer variables differ from mathematical variables in that they can store different values at different times. How do we declare variables? By putting var in front of it. Example: var myName; In JavaScript, we end statements with semicolons. Storing Values with the Assignment Operator Assignment Operator => = myVariable = 5; Assigns the Number value 5 to myVariable . Note => Any calculations to the right of the = operator are performed before variables to the left of the operator. var myVar; myVar = 5; Assigning the Value of One Variable to Another After a value is assigned to a variable using the assignment operator , you can assign the value of that variable to another variable using the assignment operator. var myVar; myVar = 5; var myNum; myNum = myVar; What is happening in the above example? myVar is declared a variable with no value myVar is assigned a value of 5 myNum is declared a variable with no value myNum the contents of myVar (which is 5 ) is assigned to the variable myNum myNum has a value of 5 Test Example: var a; a = 7; var = b; b = a; Initializing Variables with the Assignment Operator It is common to initialize a variable to an initial value in the same line as it is declared. var myVar = 0; What is happening in the above example? A new variable is created called myVar myVar is assigned a value of 5 Understanding Uninitialized Variables When JavaScript variables are declared, they have an initial value of undefined If you do a mathematical operation on an undefined variable your result will be NaN , which means \"Not a Number If you concatenate a string with an undefined variable, you will get a literal string of undefined Understanding Case Sensitivity in Variables All variables and function names are case sensitive. MYVAR is not the same as myVar or myvar Best Practice => Write variable names in JavaScript in camelCase . In camelCase , multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized. What are some examples? var someVariable; var anotherVariableName; var thisVariableNameIsSoLong; Add Two Number with JavaScript Number is a data type in JavaScript which represents numeric data. JavaScript uses the + symbol as an addition operator when placed between two numbers. What is an example? myVar = 5 + 10 Subtract One Number from Another with JavaScript You can also subtract one number from another. JavaScript uses the - symbol for subtraction. What is an example? myVar = 16 - 6; Multiply Two Numbers with JavaScript You can also multiply one number by another number. JavaScript uses the * symbol for multiplication of two numbers. What is an example? myVar = 13 * 13 Divide One Number by Another with JavaScript You can also divide one number by another. JavaScript uses the / symbol for division. What is an example? myVar = 16 / 2; Increment a Number with JavaScript You can easily increment or add one to a variable with a ++ operator. The above is equal to => i = i + 1; The entire line becomes i++; , eliminating the need for the equal sign. What is an example? var myVar = 87; // Only change code below this line myVar = myVar + 1; myVar++; Decrement a Number with JavaScript You can easily decrement or decrease a variable by one with the -- operator. Example => i--; The above is equal to => i = i - 1; The entire line becomes i--; , eliminating the need for the equal sign. Create Decimal Numbers with JavaScript We can store decimal numbers in variables too. Decimal numbers are sometime referred to as floating point numbers or floats . Not all real numbers can accurately be represented in floating point , which can lead to rounding errors. What is an example? var ourDecimal = 5.7; Multiply Two Decimals with JavaScript In JavaScript, you can also perform calculations with decimal numbers. Let's multiply two decimals together. What is an example? var product = 2.0 * 2.5; Divide One Decimal by Another with JavaScript What is an example? var quotient = 4.4 / 2.0; Finding a Remainder in JavaScript The remainder operator % gives the remainder of the division of two numbers. Example 5 % 2 = 1 because Math.floor(5 / 2) = 2 (Quotient) 2 * 2 = 4 5 - 4 = 1 (Remainder) Usage In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by 2 . 17 % 2 = 1 (17 is Odd) 48 % 2 = 0 (48 is Even) Note: The remainder operator is sometimes incorrectly referred to as the modulus operator. It is very similar to modulus, but does not work properly with negative numbers. Test Example var remainder; remainder = 11 % 3 Compound Assignment with Augmented Addition In programming, it is common to use assignments to modify the contents of a variable. Remember that everything to the right of th equals sign is evaluated first, so we can say: my Var = myVar + 5; to add 5 to myVar . Since this is such a common pattern, there are operators which do both - a mathematical operation and assignment in one step. One such operator is the += operator. What is an example? var myVar = 1; myVar += 5; console.log(myVar); Test Example a = a + 5; b = b + 17; c = c + 8; Can Be: a += 5; b += 17; c += 8; Compound Assignment With Augmented Subtraction Like the += operator, -= subtracts a number from a variable. Example myVar = myVar -5; will subtract 5 from myVar . Can be rewritten as : myVar -= 5; Test Example: a = a - 6; b = b - 15; c = c - 1; Can Be: a -= 6; b -= 15; c -= 1; Compound Assignment With Augmented Multiplication The *= operator multiplies a variable by a number. myVar = myVar * 5; will multiply myVar by 5 . This can be rewritten as: myVar *= 5; Test Example: var a = 5; var b = 12; var c = 4.6; // Only change code below this line a = a * 5; b = 3 * b; c = c * 10; Can Be: a *= 5; b *= 3; c *= 10; Compound Assignment With Augmented Division","title":"Java Script"},{"location":"javascript/#javascript","text":"","title":"JavaScript"},{"location":"javascript/#course-javascript-algorithms-and-data-structures-certification","text":"NOTE from freeCodeCamp","title":"Course:  JavaScript Algorithms and Data Structures Certification"},{"location":"javascript/#comment-your-javascript-code","text":"Comments are lines of code that JavaScript will intentionally ignore. Leave notes for yourself and others who are reading your code. To leave an in-line comment. // This is an in-line comment. To leave a multi-line comment beginning with /* and ending with */ . Here is an example: /* This is a multi -line comment */","title":"Comment Your JavaScript Code"},{"location":"javascript/#declare-javascript-variables","text":"Data is anything that is meaningful to the computer. undefined null boolean string symbol bigint number object Computer's need to be able to distinguish between numbers and strings, such as \"12\" and \"123 dogs\". Whereas, \"12\" is a number , and \"123 dogs\" should be processed as a string . Variables allow computers to store and manipulate data. Any of the above eight data types may be stored as a variable. Computer variables differ from mathematical variables in that they can store different values at different times. How do we declare variables? By putting var in front of it. Example: var myName; In JavaScript, we end statements with semicolons.","title":"Declare JavaScript Variables"},{"location":"javascript/#storing-values-with-the-assignment-operator","text":"Assignment Operator => = myVariable = 5; Assigns the Number value 5 to myVariable . Note => Any calculations to the right of the = operator are performed before variables to the left of the operator. var myVar; myVar = 5;","title":"Storing Values with the Assignment Operator"},{"location":"javascript/#assigning-the-value-of-one-variable-to-another","text":"After a value is assigned to a variable using the assignment operator , you can assign the value of that variable to another variable using the assignment operator. var myVar; myVar = 5; var myNum; myNum = myVar; What is happening in the above example? myVar is declared a variable with no value myVar is assigned a value of 5 myNum is declared a variable with no value myNum the contents of myVar (which is 5 ) is assigned to the variable myNum myNum has a value of 5 Test Example: var a; a = 7; var = b; b = a;","title":"Assigning the Value of One Variable to Another"},{"location":"javascript/#initializing-variables-with-the-assignment-operator","text":"It is common to initialize a variable to an initial value in the same line as it is declared. var myVar = 0; What is happening in the above example? A new variable is created called myVar myVar is assigned a value of 5","title":"Initializing Variables with the Assignment Operator"},{"location":"javascript/#understanding-uninitialized-variables","text":"When JavaScript variables are declared, they have an initial value of undefined If you do a mathematical operation on an undefined variable your result will be NaN , which means \"Not a Number If you concatenate a string with an undefined variable, you will get a literal string of undefined","title":"Understanding Uninitialized Variables"},{"location":"javascript/#understanding-case-sensitivity-in-variables","text":"All variables and function names are case sensitive. MYVAR is not the same as myVar or myvar Best Practice => Write variable names in JavaScript in camelCase . In camelCase , multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized. What are some examples? var someVariable; var anotherVariableName; var thisVariableNameIsSoLong;","title":"Understanding Case Sensitivity in Variables"},{"location":"javascript/#add-two-number-with-javascript","text":"Number is a data type in JavaScript which represents numeric data. JavaScript uses the + symbol as an addition operator when placed between two numbers. What is an example? myVar = 5 + 10","title":"Add Two Number with JavaScript"},{"location":"javascript/#subtract-one-number-from-another-with-javascript","text":"You can also subtract one number from another. JavaScript uses the - symbol for subtraction. What is an example? myVar = 16 - 6;","title":"Subtract One Number from Another with JavaScript"},{"location":"javascript/#multiply-two-numbers-with-javascript","text":"You can also multiply one number by another number. JavaScript uses the * symbol for multiplication of two numbers. What is an example? myVar = 13 * 13","title":"Multiply Two Numbers with JavaScript"},{"location":"javascript/#divide-one-number-by-another-with-javascript","text":"You can also divide one number by another. JavaScript uses the / symbol for division. What is an example? myVar = 16 / 2;","title":"Divide One Number by Another with JavaScript"},{"location":"javascript/#increment-a-number-with-javascript","text":"You can easily increment or add one to a variable with a ++ operator. The above is equal to => i = i + 1; The entire line becomes i++; , eliminating the need for the equal sign. What is an example? var myVar = 87; // Only change code below this line myVar = myVar + 1; myVar++;","title":"Increment a Number with JavaScript"},{"location":"javascript/#decrement-a-number-with-javascript","text":"You can easily decrement or decrease a variable by one with the -- operator. Example => i--; The above is equal to => i = i - 1; The entire line becomes i--; , eliminating the need for the equal sign.","title":"Decrement a Number with JavaScript"},{"location":"javascript/#create-decimal-numbers-with-javascript","text":"We can store decimal numbers in variables too. Decimal numbers are sometime referred to as floating point numbers or floats . Not all real numbers can accurately be represented in floating point , which can lead to rounding errors. What is an example? var ourDecimal = 5.7;","title":"Create Decimal Numbers with JavaScript"},{"location":"javascript/#multiply-two-decimals-with-javascript","text":"In JavaScript, you can also perform calculations with decimal numbers. Let's multiply two decimals together. What is an example? var product = 2.0 * 2.5;","title":"Multiply Two Decimals with JavaScript"},{"location":"javascript/#divide-one-decimal-by-another-with-javascript","text":"What is an example? var quotient = 4.4 / 2.0;","title":"Divide One Decimal by Another with JavaScript"},{"location":"javascript/#finding-a-remainder-in-javascript","text":"The remainder operator % gives the remainder of the division of two numbers. Example 5 % 2 = 1 because Math.floor(5 / 2) = 2 (Quotient) 2 * 2 = 4 5 - 4 = 1 (Remainder) Usage In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by 2 . 17 % 2 = 1 (17 is Odd) 48 % 2 = 0 (48 is Even) Note: The remainder operator is sometimes incorrectly referred to as the modulus operator. It is very similar to modulus, but does not work properly with negative numbers. Test Example var remainder; remainder = 11 % 3","title":"Finding a Remainder in JavaScript"},{"location":"javascript/#compound-assignment-with-augmented-addition","text":"In programming, it is common to use assignments to modify the contents of a variable. Remember that everything to the right of th equals sign is evaluated first, so we can say: my Var = myVar + 5; to add 5 to myVar . Since this is such a common pattern, there are operators which do both - a mathematical operation and assignment in one step. One such operator is the += operator. What is an example? var myVar = 1; myVar += 5; console.log(myVar); Test Example a = a + 5; b = b + 17; c = c + 8; Can Be: a += 5; b += 17; c += 8;","title":"Compound Assignment with Augmented Addition"},{"location":"javascript/#compound-assignment-with-augmented-subtraction","text":"Like the += operator, -= subtracts a number from a variable. Example myVar = myVar -5; will subtract 5 from myVar . Can be rewritten as : myVar -= 5; Test Example: a = a - 6; b = b - 15; c = c - 1; Can Be: a -= 6; b -= 15; c -= 1;","title":"Compound Assignment With Augmented Subtraction"},{"location":"javascript/#compound-assignment-with-augmented-multiplication","text":"The *= operator multiplies a variable by a number. myVar = myVar * 5; will multiply myVar by 5 . This can be rewritten as: myVar *= 5; Test Example: var a = 5; var b = 12; var c = 4.6; // Only change code below this line a = a * 5; b = 3 * b; c = c * 10; Can Be: a *= 5; b *= 3; c *= 10;","title":"Compound Assignment With Augmented Multiplication"},{"location":"javascript/#compound-assignment-with-augmented-division","text":"","title":"Compound Assignment With Augmented Division"},{"location":"mc/","text":"Midnight Commander Installation To install => sudo apt-get install mc To launch => mc Using Midnight Commander The file manager is split into two panels to make copying and moving files easier. 10 Labeled Rectangles at the bottom of the window. Help Menu View Edit Copy RenMov Mkdir Delete PullDn Quit Above the 10 options listed above, you will see your current working directory. Example => username@hostname:~$ Active panel is the one on the left. You can move around the panel using the UP and DOWN arrow keys. To create a new file, you can do touch test and then ENTER. Then, use UP and DOWN arrows to navigate around the left window pane. If you wish to delete the newly created test file, then you can hit F8 on your keyboard. At the top of the Midnight Commander window, you will see the following drop-down menus: Left File Command Options Right To access the above menus, you will need to hit F9 on your keyboard. Once you hit F9 Left will be selected, you can use the UP and DOWN arrows to move around the left window pane. If you would like to move to a different drop-down menu, then you can hit the first letter of the menu. For example, if you hit C , then you will move to the Command menu. Command drop-down menu selections include some of the following: User menu Directory tree Find file Swap panels To switch between the two panels, use TAB . To close Midnight Commander, do F10 .","title":"Midnight Commander"},{"location":"mc/#midnight-commander","text":"","title":"Midnight Commander"},{"location":"mc/#installation","text":"To install => sudo apt-get install mc To launch => mc","title":"Installation"},{"location":"mc/#using-midnight-commander","text":"The file manager is split into two panels to make copying and moving files easier. 10 Labeled Rectangles at the bottom of the window. Help Menu View Edit Copy RenMov Mkdir Delete PullDn Quit Above the 10 options listed above, you will see your current working directory. Example => username@hostname:~$ Active panel is the one on the left. You can move around the panel using the UP and DOWN arrow keys. To create a new file, you can do touch test and then ENTER. Then, use UP and DOWN arrows to navigate around the left window pane. If you wish to delete the newly created test file, then you can hit F8 on your keyboard. At the top of the Midnight Commander window, you will see the following drop-down menus: Left File Command Options Right To access the above menus, you will need to hit F9 on your keyboard. Once you hit F9 Left will be selected, you can use the UP and DOWN arrows to move around the left window pane. If you would like to move to a different drop-down menu, then you can hit the first letter of the menu. For example, if you hit C , then you will move to the Command menu. Command drop-down menu selections include some of the following: User menu Directory tree Find file Swap panels To switch between the two panels, use TAB . To close Midnight Commander, do F10 .","title":"Using Midnight Commander"},{"location":"nodered/","text":"Node-RED Node-RED Essentials Resource Used: Node-RED Essentials Introduction Editor Components Creating a Flow Wiring Node Editing Nodes Deploying Flows Information Sidebar Debug Sidebar Configuration Nodes Sidebar Context Sidebar Subflows Working with Context Introduction to Messages Working with Messages Message Sequences Routing Messages Managing Messages Merging Flows Grouping Nodes Introduction flow based programming tool browser based built on top of node.js Editor Components 4 areas of the editor header (menu, deploy button) sidebar (info, debug, context) main workspace palette Creating a Flow To create a flow, drag inject node on to the workspace. Then, add debug node to the workspace. Drag a line from the inject node timestamp to debug node msg.payload . For something to happen, you need to click the Deploy button. Then, click on the button on the left hand side of the timestamp node to inject the timestamp into the msg.payload . Now, add function node to add JavaScript code that gets run against each message passing through. Node-RED - Cellular Routers Building Custom Nodes for Node.js or Node-RED Please Note : The notes below are for building nodes written in JavaScript only. Using a Linux OS (I used Ubuntu 20.04 LTS) First, make sure your system is up-to-date via sudo apt-get update Next, install the Node Package Manager ( npm ) via sudo apt-get install npm Once, the install is finished, you should have a .node-red directory. You will need to run the install command for the desired node in the .node-red directory. NOTE : I have found that if you do not any dependencies will not install correctly. If you are not already in the .node-red directory, please cd into via cd .node-red/ For this example, I wanted to install the node-red-contrib-azure-iot-hub node. I located the node I wanted here Once you are at the site, just search for the node you are needing and click on the node name. More specifically, here is the link to My Example Once you are on the page, you will see a lot of information on the node, such as any dependencies. After ensuring this was the node I needed, I installed it via npm --global-style install node-red-contrib-azure-iot-hub Once the node was installed on my Ubuntu machine, I navigated to my node_modules folder. After doing a ls , I could see the node-red-contrib-azure-iot-hub folder. Then, I copied the node folder ( node-red-contrib-azure-iot-hub ) via SFTP to the target folder on the router. Desired location for Node-RED nodes => /usr/lib/node_modules/node-red/nodes For other nodes, the desired location => /usr/lib/node_modules/ It is recommended to create a link to the /opt folder from the above mentioned folders to avoid overriding while upgrading firmware. While in the /usr/lib/node_modules/node-red/nodes , use ln -s node-red-contrib-azure-iot-hub /opt to create the link to the /opt folder. Intro to JSON for Node-RED Resource => Intro to JSON for Node-RED // name(string) {\"name\" : value \"company\" : \"Opto\", \"count\" : 22, \"open\" : true, \"reading\" : null, \"list\" : [\"Benson\",\"Bob\",\"Ben\"], \"address\" : { \"street\" : \"Business Park Drive\", \"code\" : 92590 } }","title":"Node-RED"},{"location":"nodered/#node-red","text":"","title":"Node-RED"},{"location":"nodered/#node-red-essentials","text":"Resource Used: Node-RED Essentials Introduction Editor Components Creating a Flow Wiring Node Editing Nodes Deploying Flows Information Sidebar Debug Sidebar Configuration Nodes Sidebar Context Sidebar Subflows Working with Context Introduction to Messages Working with Messages Message Sequences Routing Messages Managing Messages Merging Flows Grouping Nodes","title":"Node-RED Essentials"},{"location":"nodered/#introduction","text":"flow based programming tool browser based built on top of node.js","title":"Introduction"},{"location":"nodered/#editor-components","text":"4 areas of the editor header (menu, deploy button) sidebar (info, debug, context) main workspace palette","title":"Editor Components"},{"location":"nodered/#creating-a-flow","text":"To create a flow, drag inject node on to the workspace. Then, add debug node to the workspace. Drag a line from the inject node timestamp to debug node msg.payload . For something to happen, you need to click the Deploy button. Then, click on the button on the left hand side of the timestamp node to inject the timestamp into the msg.payload . Now, add function node to add JavaScript code that gets run against each message passing through.","title":"Creating a Flow"},{"location":"nodered/#node-red-cellular-routers","text":"","title":"Node-RED - Cellular Routers"},{"location":"nodered/#building-custom-nodes-for-nodejs-or-node-red","text":"Please Note : The notes below are for building nodes written in JavaScript only. Using a Linux OS (I used Ubuntu 20.04 LTS) First, make sure your system is up-to-date via sudo apt-get update Next, install the Node Package Manager ( npm ) via sudo apt-get install npm Once, the install is finished, you should have a .node-red directory. You will need to run the install command for the desired node in the .node-red directory. NOTE : I have found that if you do not any dependencies will not install correctly. If you are not already in the .node-red directory, please cd into via cd .node-red/ For this example, I wanted to install the node-red-contrib-azure-iot-hub node. I located the node I wanted here Once you are at the site, just search for the node you are needing and click on the node name. More specifically, here is the link to My Example Once you are on the page, you will see a lot of information on the node, such as any dependencies. After ensuring this was the node I needed, I installed it via npm --global-style install node-red-contrib-azure-iot-hub Once the node was installed on my Ubuntu machine, I navigated to my node_modules folder. After doing a ls , I could see the node-red-contrib-azure-iot-hub folder. Then, I copied the node folder ( node-red-contrib-azure-iot-hub ) via SFTP to the target folder on the router. Desired location for Node-RED nodes => /usr/lib/node_modules/node-red/nodes For other nodes, the desired location => /usr/lib/node_modules/ It is recommended to create a link to the /opt folder from the above mentioned folders to avoid overriding while upgrading firmware. While in the /usr/lib/node_modules/node-red/nodes , use ln -s node-red-contrib-azure-iot-hub /opt to create the link to the /opt folder.","title":"Building Custom Nodes for Node.js or Node-RED"},{"location":"nodered/#intro-to-json-for-node-red","text":"Resource => Intro to JSON for Node-RED // name(string) {\"name\" : value \"company\" : \"Opto\", \"count\" : 22, \"open\" : true, \"reading\" : null, \"list\" : [\"Benson\",\"Bob\",\"Ben\"], \"address\" : { \"street\" : \"Business Park Drive\", \"code\" : 92590 } }","title":"Intro to JSON for Node-RED"},{"location":"openSSH/","text":"OpenSSH Notes: These are my notes on Jay LaCroix's YouTube video. Link to Video Connecting to a Server via OpenSSH CLI OpenSSH client is on the majority of Linux distributions. Even though the client is installed on your system, it does not mean people can connect to you. How to tell if you have the SSH client installed => which ssh Results => /usr/bin/bash (meaning it is already installed) If the SSH Client was not installed, then you could search via => apt search openssh-client To connect to a SSH Server => ssh <username>@<server_IP_address> You will receive a key fingerprint message if you have not connected to the server previously. To see what occured in your system, navigate to => ls /home/mholdiman/ -a You will see you have a hidden directory called .ssh Navigate to that directory => cd .ssh Lets look at the file called known_hosts => cat known_hosts The file will show all the fingerprints for servers you have connected to previously. Why is this important? It helps you mitigate \"Man in the Middle\" attacks. Man in the Middle attack means you wouldn't be connecting to the server you think you are connecting to. What happens when you connect to a server behind the scenes? Connect to the server via ssh . Since you are root, you have full access to the log files. Navigate to /var/log/ You can watch the auth.log file by doing => tail -f auth.log This is useful to know, so you can watch log if someone cannot connect. Configuring a SSH Client Located => ~/.ssh/ Create file called config Host \"name\" Hostname \"IP Address\" Port 22 User \"username\" NOTE: For this to work for me, I had to add the host and hostname information to my /etc/hosts file. Using Public/Private Keys It is better to use ssh keys than to just use a password. Best practice is to disable password authorization on a server. To create a ssh keypair => ssh-keygen It will automatically create the keys in the default location. Default Location => ~/.ssh The two keys created with the above command are id_rsa and id_rsa.pub . Once the keys are created a random art image and the key fingerprint will show in the output. The private key id_rsa and id_rsa.pub are required for the SSH connection to work. The public key id_rsa.pub needs to be copied to the server. To do this, you can do the following: cat the contents of the id_rsa.pub and copy and paste to the authorized_keys file on the server. Use the command => ssh-copy-id -i ~/.ssh/id_rsa.pub root@<Server_IP> . The SSH program will automatically create the .ssh/ and the authorized_keys file if they do not already exist.","title":"OpenSSH"},{"location":"openSSH/#openssh","text":"Notes: These are my notes on Jay LaCroix's YouTube video. Link to Video","title":"OpenSSH"},{"location":"openSSH/#connecting-to-a-server-via-openssh-cli","text":"OpenSSH client is on the majority of Linux distributions. Even though the client is installed on your system, it does not mean people can connect to you. How to tell if you have the SSH client installed => which ssh Results => /usr/bin/bash (meaning it is already installed) If the SSH Client was not installed, then you could search via => apt search openssh-client To connect to a SSH Server => ssh <username>@<server_IP_address> You will receive a key fingerprint message if you have not connected to the server previously. To see what occured in your system, navigate to => ls /home/mholdiman/ -a You will see you have a hidden directory called .ssh Navigate to that directory => cd .ssh Lets look at the file called known_hosts => cat known_hosts The file will show all the fingerprints for servers you have connected to previously. Why is this important? It helps you mitigate \"Man in the Middle\" attacks. Man in the Middle attack means you wouldn't be connecting to the server you think you are connecting to. What happens when you connect to a server behind the scenes? Connect to the server via ssh . Since you are root, you have full access to the log files. Navigate to /var/log/ You can watch the auth.log file by doing => tail -f auth.log This is useful to know, so you can watch log if someone cannot connect.","title":"Connecting to a Server via OpenSSH CLI"},{"location":"openSSH/#configuring-a-ssh-client","text":"Located => ~/.ssh/ Create file called config Host \"name\" Hostname \"IP Address\" Port 22 User \"username\" NOTE: For this to work for me, I had to add the host and hostname information to my /etc/hosts file.","title":"Configuring a SSH Client"},{"location":"openSSH/#using-publicprivate-keys","text":"It is better to use ssh keys than to just use a password. Best practice is to disable password authorization on a server. To create a ssh keypair => ssh-keygen It will automatically create the keys in the default location. Default Location => ~/.ssh The two keys created with the above command are id_rsa and id_rsa.pub . Once the keys are created a random art image and the key fingerprint will show in the output. The private key id_rsa and id_rsa.pub are required for the SSH connection to work. The public key id_rsa.pub needs to be copied to the server. To do this, you can do the following: cat the contents of the id_rsa.pub and copy and paste to the authorized_keys file on the server. Use the command => ssh-copy-id -i ~/.ssh/id_rsa.pub root@<Server_IP> . The SSH program will automatically create the .ssh/ and the authorized_keys file if they do not already exist.","title":"Using Public/Private Keys"},{"location":"openvpn/","text":"OpenVPN Information To Connect an Ubuntu machine to OpenVPN server System Info Date: 2021.01.21 OS: Ubuntu 20.04 OpenVPN: OpenVPN 2.4.7 Configuration File: 192.168.20.2.ovpn File Location => ~/Documents/work/KBs/ Procedure sudo apt update sudo apt install openvpn -y Download the Standalone VPN Client configuration file from your WebAccess/VPN server. Navigate to the directory where the configuration was downloaded. For my example, it would be cd ~/Downloads Then, run the following command to the connect to the OpenVPN server. sudo openvpn --config 192.168.20.2.ovpn","title":"OpenVPN"},{"location":"openvpn/#openvpn-information","text":"","title":"OpenVPN Information"},{"location":"openvpn/#to-connect-an-ubuntu-machine-to-openvpn-server","text":"System Info Date: 2021.01.21 OS: Ubuntu 20.04 OpenVPN: OpenVPN 2.4.7 Configuration File: 192.168.20.2.ovpn File Location => ~/Documents/work/KBs/ Procedure sudo apt update sudo apt install openvpn -y Download the Standalone VPN Client configuration file from your WebAccess/VPN server. Navigate to the directory where the configuration was downloaded. For my example, it would be cd ~/Downloads Then, run the following command to the connect to the OpenVPN server. sudo openvpn --config 192.168.20.2.ovpn","title":"To Connect an Ubuntu machine to OpenVPN server"},{"location":"resources/","text":"List of Cool Resources FreeCodeCamp Learn C Learn C++ C++ Reference Women Who Code","title":"Cool Resources"},{"location":"resources/#list-of-cool-resources","text":"FreeCodeCamp Learn C Learn C++ C++ Reference Women Who Code","title":"List of Cool Resources"},{"location":"samba/","text":"Installing & Configuring Samba Update first => sudo apt update To install => sudo apt install samba To check version information => samba --version To see where Samba is installed => whereis samba Create a directory for Samba to share => mkdir ~/<username>/sambashare/ Location of Samba configuration file => /etc/samba/smb.conf Example of Samba configuration file: [sambashare] comment = Samba on Ubuntu path = /home/ /sambashare read only = no browsable = yes To setup a Samba password => sudo smbpasswd -a username Connecting to a Share In Ubuntu: Open up the default file manager and click Connect to Server then enter => smb://ip-address/sambashare In Windows: Open File Manager and edit the file path to => \\\\ip-address\\sambashare NOTE: ip-address => Samba server IP address & sambashare is the name of the share RESOURCE : Installing and Configuring Samba My Samba Configuration [homes] comment = Home Directories browseable = yes read only = no create mask = 0700 directory mask = 0700 valid users = %S","title":"Samba"},{"location":"samba/#installing-configuring-samba","text":"Update first => sudo apt update To install => sudo apt install samba To check version information => samba --version To see where Samba is installed => whereis samba Create a directory for Samba to share => mkdir ~/<username>/sambashare/ Location of Samba configuration file => /etc/samba/smb.conf Example of Samba configuration file: [sambashare] comment = Samba on Ubuntu path = /home/ /sambashare read only = no browsable = yes To setup a Samba password => sudo smbpasswd -a username","title":"Installing &amp; Configuring Samba"},{"location":"samba/#connecting-to-a-share","text":"In Ubuntu: Open up the default file manager and click Connect to Server then enter => smb://ip-address/sambashare In Windows: Open File Manager and edit the file path to => \\\\ip-address\\sambashare NOTE: ip-address => Samba server IP address & sambashare is the name of the share RESOURCE : Installing and Configuring Samba","title":"Connecting to a Share"},{"location":"samba/#my-samba-configuration","text":"[homes] comment = Home Directories browseable = yes read only = no create mask = 0700 directory mask = 0700 valid users = %S","title":"My Samba Configuration"},{"location":"wireguard/","text":"WireGuard free and open-source communication protocol and software which implements encrypted virtual private networks (VPNs) passes traffic over UDP WireGuard & Advantech Routers Up to 4 WireGuard VPN tunnels per router Windows 10 Client to ICR-3241 (Client-to-Server) ICR-3241 Configuration (Server) Fields to update: Description Local Port NAT/Firewall Traversal Interface IPv4 Address Interface IPv4 Prefix Length Install Routers Traffic Selector Remote Subnets Click on the Generate box to generate a Local Private Key and a Local Public Key Copy and paste the Remote Public Key from the Windows 10 WireGuard Client Click Apply Windows 10 Configuration (Client) Click Add Empty Tunnel in the WireGuard Software In the Create New Tunnel window, do the following: Give your tunnel a name Copy the public and private keys to a safe location Below [Interface] and Private Key , enter the following: the VPN IP address you want to give the Windows client the DNS address Please see example below [Interface] PrivateKey = <removed> Address = 172.16.24.1/32 DNS = 8.8.8.8, 8.8.4.4 Now you will need to enter the configuration information for the peer, in this case server. Please see example below [Peer] PublicKey = <removed> AllowedIPs = 192.168.20.0/24 # The network behind the router Endpoint = <publicly_accessible_IP>:51820","title":"WireGuard"},{"location":"wireguard/#wireguard","text":"free and open-source communication protocol and software which implements encrypted virtual private networks (VPNs) passes traffic over UDP","title":"WireGuard"},{"location":"wireguard/#wireguard-advantech-routers","text":"Up to 4 WireGuard VPN tunnels per router","title":"WireGuard &amp; Advantech Routers"},{"location":"wireguard/#windows-10-client-to-icr-3241-client-to-server","text":"","title":"Windows 10 Client to ICR-3241 (Client-to-Server)"},{"location":"wireguard/#icr-3241-configuration-server","text":"Fields to update: Description Local Port NAT/Firewall Traversal Interface IPv4 Address Interface IPv4 Prefix Length Install Routers Traffic Selector Remote Subnets Click on the Generate box to generate a Local Private Key and a Local Public Key Copy and paste the Remote Public Key from the Windows 10 WireGuard Client Click Apply","title":"ICR-3241 Configuration (Server)"},{"location":"wireguard/#windows-10-configuration-client","text":"Click Add Empty Tunnel in the WireGuard Software In the Create New Tunnel window, do the following: Give your tunnel a name Copy the public and private keys to a safe location Below [Interface] and Private Key , enter the following: the VPN IP address you want to give the Windows client the DNS address Please see example below [Interface] PrivateKey = <removed> Address = 172.16.24.1/32 DNS = 8.8.8.8, 8.8.4.4 Now you will need to enter the configuration information for the peer, in this case server. Please see example below [Peer] PublicKey = <removed> AllowedIPs = 192.168.20.0/24 # The network behind the router Endpoint = <publicly_accessible_IP>:51820","title":"Windows 10 Configuration (Client)"}]}